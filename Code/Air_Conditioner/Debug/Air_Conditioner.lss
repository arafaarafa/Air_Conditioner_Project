
Air_Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002232  000022c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  008000fc  008000fc  00002362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040ea  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001135  00000000  00000000  00006742  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025f1  00000000  00000000  00007877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00009e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000177b  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026e5  00000000  00000000  0000bc93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000e378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	6b 0a       	sbc	r6, r27
      56:	76 0a       	sbc	r7, r22
      58:	81 0a       	sbc	r8, r17
      5a:	8f 0b       	sbc	r24, r31
      5c:	8c 0a       	sbc	r8, r28
      5e:	8f 0b       	sbc	r24, r31
      60:	97 0a       	sbc	r9, r23
      62:	a2 0a       	sbc	r10, r18
      64:	ad 0a       	sbc	r10, r29
      66:	b8 0a       	sbc	r11, r24
      68:	ce 0a       	sbc	r12, r30
      6a:	d9 0a       	sbc	r13, r25
      6c:	e4 0a       	sbc	r14, r20
      6e:	91 0b       	sbc	r25, r17
      70:	ef 0a       	sbc	r14, r31
      72:	91 0b       	sbc	r25, r17
      74:	fa 0a       	sbc	r15, r26
      76:	05 0b       	sbc	r16, r21
      78:	10 0b       	sbc	r17, r16
      7a:	1b 0b       	sbc	r17, r27
      7c:	31 0b       	sbc	r19, r17
      7e:	3c 0b       	sbc	r19, r28
      80:	47 0b       	sbc	r20, r23
      82:	52 0b       	sbc	r21, r18
      84:	5d 0b       	sbc	r21, r29
      86:	68 0b       	sbc	r22, r24
      88:	73 0b       	sbc	r23, r19
      8a:	7e 0b       	sbc	r23, r30

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e2 e3       	ldi	r30, 0x32	; 50
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 3f       	cpi	r26, 0xFC	; 252
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	ac ef       	ldi	r26, 0xFC	; 252
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a2 35       	cpi	r26, 0x52	; 82
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 03 08 	call	0x1006	; 0x1006 <main>
      c2:	0c 94 17 11 	jmp	0x222e	; 0x222e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <intToString>:


void intToString(uint8_t copy_u8_num, uint8_t *ptr_string) {
	uint8_t u8_digit_counter = U8_ZERO_VALUE;

	if (copy_u8_num == U8_ZERO_VALUE) {
      ca:	88 23       	and	r24, r24
      cc:	71 f0       	breq	.+28     	; 0xea <intToString+0x20>
      ce:	98 2f       	mov	r25, r24
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	08 c0       	rjmp	.+16     	; 0xe4 <intToString+0x1a>
		u8_digit_counter = U8_ONE_VALUE;
		} else {
		uint8_t temp = copy_u8_num;  // Store a temporary copy of the number
		while (temp != U8_ZERO_VALUE) {
			temp /= APP_SELECT_TENS_DIGIT;
      d4:	3d ec       	ldi	r19, 0xCD	; 205
      d6:	93 9f       	mul	r25, r19
      d8:	91 2d       	mov	r25, r1
      da:	11 24       	eor	r1, r1
      dc:	96 95       	lsr	r25
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
			u8_digit_counter++;
      e2:	2f 5f       	subi	r18, 0xFF	; 255

	if (copy_u8_num == U8_ZERO_VALUE) {
		u8_digit_counter = U8_ONE_VALUE;
		} else {
		uint8_t temp = copy_u8_num;  // Store a temporary copy of the number
		while (temp != U8_ZERO_VALUE) {
      e4:	91 11       	cpse	r25, r1
      e6:	f6 cf       	rjmp	.-20     	; 0xd4 <intToString+0xa>
      e8:	01 c0       	rjmp	.+2      	; 0xec <intToString+0x22>

void intToString(uint8_t copy_u8_num, uint8_t *ptr_string) {
	uint8_t u8_digit_counter = U8_ZERO_VALUE;

	if (copy_u8_num == U8_ZERO_VALUE) {
		u8_digit_counter = U8_ONE_VALUE;
      ea:	21 e0       	ldi	r18, 0x01	; 1
	}
	u8_digit_counter++;


	uint8_t u8_string_counter = u8_digit_counter - U8_ONE_VALUE;  // Start from the end of the buffer
	ptr_string[u8_string_counter] = APP_NULL_TERMINATION_STRING;  // Null-terminate the string
      ec:	fb 01       	movw	r30, r22
      ee:	e2 0f       	add	r30, r18
      f0:	f1 1d       	adc	r31, r1
      f2:	10 82       	st	Z, r1

	if (copy_u8_num == U8_ZERO_VALUE) {
      f4:	81 11       	cpse	r24, r1
      f6:	1c c0       	rjmp	.+56     	; 0x130 <intToString+0x66>
		ptr_string[--u8_string_counter] = APP_0_CHAR;  // Handle the special case of zero
      f8:	21 50       	subi	r18, 0x01	; 1
      fa:	fb 01       	movw	r30, r22
      fc:	e2 0f       	add	r30, r18
      fe:	f1 1d       	adc	r31, r1
     100:	80 e3       	ldi	r24, 0x30	; 48
     102:	80 83       	st	Z, r24
     104:	08 95       	ret
		} else {
		while (copy_u8_num > U8_ZERO_VALUE && u8_string_counter > U8_ZERO_VALUE) {
			ptr_string[--u8_string_counter] = '0' + (copy_u8_num % APP_SELECT_TENS_DIGIT); // Convert the digit to character
     106:	21 50       	subi	r18, 0x01	; 1
     108:	fb 01       	movw	r30, r22
     10a:	e2 0f       	add	r30, r18
     10c:	f1 1d       	adc	r31, r1
     10e:	9d ec       	ldi	r25, 0xCD	; 205
     110:	89 9f       	mul	r24, r25
     112:	91 2d       	mov	r25, r1
     114:	11 24       	eor	r1, r1
     116:	96 95       	lsr	r25
     118:	96 95       	lsr	r25
     11a:	96 95       	lsr	r25
     11c:	49 2f       	mov	r20, r25
     11e:	44 0f       	add	r20, r20
     120:	34 2f       	mov	r19, r20
     122:	33 0f       	add	r19, r19
     124:	33 0f       	add	r19, r19
     126:	34 0f       	add	r19, r20
     128:	83 1b       	sub	r24, r19
     12a:	80 5d       	subi	r24, 0xD0	; 208
     12c:	80 83       	st	Z, r24
			copy_u8_num /= APP_SELECT_TENS_DIGIT;
     12e:	89 2f       	mov	r24, r25
	ptr_string[u8_string_counter] = APP_NULL_TERMINATION_STRING;  // Null-terminate the string

	if (copy_u8_num == U8_ZERO_VALUE) {
		ptr_string[--u8_string_counter] = APP_0_CHAR;  // Handle the special case of zero
		} else {
		while (copy_u8_num > U8_ZERO_VALUE && u8_string_counter > U8_ZERO_VALUE) {
     130:	88 23       	and	r24, r24
     132:	11 f0       	breq	.+4      	; 0x138 <intToString+0x6e>
     134:	21 11       	cpse	r18, r1
     136:	e7 cf       	rjmp	.-50     	; 0x106 <intToString+0x3c>
     138:	08 95       	ret

0000013a <delay_half_sec>:
			copy_u8_num /= APP_SELECT_TENS_DIGIT;
		}
	}
}

void delay_half_sec(uint8_t u8_delay_half_sec){
     13a:	cf 93       	push	r28
     13c:	c8 2f       	mov	r28, r24
	
	gs_u8_delay = 0;
     13e:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <gs_u8_delay>
	TIMER_MANGER_start(gs_str_timer_1_config.enu_prescaller,gs_str_timer_1_config.enu_timer_no);
     142:	e7 e0       	ldi	r30, 0x07	; 7
     144:	f1 e0       	ldi	r31, 0x01	; 1
     146:	60 81       	ld	r22, Z
     148:	80 85       	ldd	r24, Z+8	; 0x08
     14a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TIMER_MANGER_start>
	while(gs_u8_delay <= u8_delay_half_sec);
     14e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <gs_u8_delay>
     152:	c8 17       	cp	r28, r24
     154:	e0 f7       	brcc	.-8      	; 0x14e <delay_half_sec+0x14>
	TIMER_MANGER_stop(gs_str_timer_1_config.enu_timer_no);
     156:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <gs_str_timer_1_config>
     15a:	0e 94 f5 07 	call	0xfea	; 0xfea <TIMER_MANGER_stop>
	
	
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <APP_timer1OvfHandeler>:
	
}

void APP_timer1OvfHandeler(void)
{
	gs_u8_delay++;
     162:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <gs_u8_delay>
     166:	8f 5f       	subi	r24, 0xFF	; 255
     168:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <gs_u8_delay>

	TIMER_MANGER_setValue(gs_str_timer_1_config.enu_timer_no,gs_str_timer_1_config.u16_timer_initial_value);
     16c:	e7 e0       	ldi	r30, 0x07	; 7
     16e:	f1 e0       	ldi	r31, 0x01	; 1
     170:	62 81       	ldd	r22, Z+2	; 0x02
     172:	73 81       	ldd	r23, Z+3	; 0x03
     174:	80 81       	ld	r24, Z
     176:	0e 94 fc 07 	call	0xff8	; 0xff8 <TIMER_MANGER_setValue>
     17a:	08 95       	ret

0000017c <APP_init>:
		}
	}
}

void APP_init(void)
{
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
	// Initialize timer 1 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	gs_str_timer_1_config.enu_timer_no = TIMER_1;
     188:	e7 e0       	ldi	r30, 0x07	; 7
     18a:	f1 e0       	ldi	r31, 0x01	; 1
     18c:	d1 e0       	ldi	r29, 0x01	; 1
     18e:	d0 83       	st	Z, r29
	gs_str_timer_1_config.enu_timer_mode = TIMER_NORMAL_MODE;
     190:	11 82       	std	Z+1, r1	; 0x01
	gs_str_timer_1_config.u16_timer_initial_value = APP_TIMER_1_INIT_VALUE;
     192:	88 e0       	ldi	r24, 0x08	; 8
     194:	90 ef       	ldi	r25, 0xF0	; 240
     196:	93 83       	std	Z+3, r25	; 0x03
     198:	82 83       	std	Z+2, r24	; 0x02
	gs_str_timer_1_config.ptr_call_back_func =  APP_timer1OvfHandeler;
     19a:	81 eb       	ldi	r24, 0xB1	; 177
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	97 83       	std	Z+7, r25	; 0x07
     1a0:	86 83       	std	Z+6, r24	; 0x06
	gs_str_timer_1_config.enu_prescaller = F_CPU_1024;	
     1a2:	c7 e0       	ldi	r28, 0x07	; 7
     1a4:	c0 87       	std	Z+8, r28	; 0x08
	
	TIMER_MANGER_init(&gs_str_timer_1_config);
     1a6:	cf 01       	movw	r24, r30
     1a8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TIMER_MANGER_init>
	
	
	// Initialize The Temp. sensor 
	gs_str_lm35_str_channel_config.str_lm35_channel.enu_channel_pin = PIN7;
     1ac:	e1 e0       	ldi	r30, 0x01	; 1
     1ae:	f1 e0       	ldi	r31, 0x01	; 1
     1b0:	c1 83       	std	Z+1, r28	; 0x01
	gs_str_lm35_str_channel_config.str_lm35_channel.enu_channel_port = PORTA;
     1b2:	10 82       	st	Z, r1
	gs_lm35_str_config.str_lm35_adc_config.adc_enu_vref = ADC_EXTERNAL_VREF;
     1b4:	e3 e0       	ldi	r30, 0x03	; 3
     1b6:	f1 e0       	ldi	r31, 0x01	; 1
     1b8:	d1 83       	std	Z+1, r29	; 0x01
	gs_lm35_str_config.str_lm35_adc_config.adc_enu_prescaler = ADC_PRESCALER_2;
     1ba:	10 82       	st	Z, r1
	LM35_init(&gs_str_lm35_str_channel_config, &gs_lm35_str_config);
     1bc:	bf 01       	movw	r22, r30
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 7d 07 	call	0xefa	; 0xefa <LM35_init>
	
	
	
	
	// Initialize the LCD
	gs_str_lcd_config.enu_mode = LCD_4_BIT_MODE;
     1c6:	e8 e2       	ldi	r30, 0x28	; 40
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	10 82       	st	Z, r1
	
	gs_str_lcd_config.str_data_pins[0].enu_port = PORTC;
     1cc:	c2 e0       	ldi	r28, 0x02	; 2
     1ce:	c1 83       	std	Z+1, r28	; 0x01
	gs_str_lcd_config.str_data_pins[0].enu_pin	 = PIN0;
     1d0:	12 82       	std	Z+2, r1	; 0x02
	
	gs_str_lcd_config.str_data_pins[1].enu_port	 = PORTC;
     1d2:	c3 83       	std	Z+3, r28	; 0x03
	gs_str_lcd_config.str_data_pins[1].enu_pin	 = PIN1;
     1d4:	d4 83       	std	Z+4, r29	; 0x04
	
	gs_str_lcd_config.str_data_pins[2].enu_port	 = PORTC;
     1d6:	c5 83       	std	Z+5, r28	; 0x05
	gs_str_lcd_config.str_data_pins[2].enu_pin	 = PIN2;
     1d8:	c6 83       	std	Z+6, r28	; 0x06
	
	gs_str_lcd_config.str_data_pins[3].enu_port	 = PORTC;
     1da:	c7 83       	std	Z+7, r28	; 0x07
	gs_str_lcd_config.str_data_pins[3].enu_pin	 = PIN3;
     1dc:	13 e0       	ldi	r17, 0x03	; 3
     1de:	10 87       	std	Z+8, r17	; 0x08
	
	gs_str_lcd_config.str_RSpin.enu_port = PORTC;
     1e0:	c1 8b       	std	Z+17, r28	; 0x11
	gs_str_lcd_config.str_RSpin.enu_pin = PIN4;
     1e2:	68 94       	set
     1e4:	ee 24       	eor	r14, r14
     1e6:	e2 f8       	bld	r14, 2
     1e8:	e2 8a       	std	Z+18, r14	; 0x12
	
	gs_str_lcd_config.str_RWpin.enu_port = PORTC;
     1ea:	c3 8b       	std	Z+19, r28	; 0x13
	gs_str_lcd_config.str_RWpin.enu_pin	= PIN5;
     1ec:	0f 2e       	mov	r0, r31
     1ee:	f5 e0       	ldi	r31, 0x05	; 5
     1f0:	ff 2e       	mov	r15, r31
     1f2:	f0 2d       	mov	r31, r0
     1f4:	f4 8a       	std	Z+20, r15	; 0x14
	
	gs_str_lcd_config.str_Epin.enu_port = PORTC	;
     1f6:	c5 8b       	std	Z+21, r28	; 0x15
	gs_str_lcd_config.str_Epin.enu_pin	= PIN6;
     1f8:	06 e0       	ldi	r16, 0x06	; 6
     1fa:	06 8b       	std	Z+22, r16	; 0x16
	
	LCD_init(&gs_str_lcd_config);
     1fc:	cf 01       	movw	r24, r30
     1fe:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LCD_init>
	
	
	
	
	// Initialize the keypad
	gs_str_keypad_config.str_col_pins[0].enu_port = PORTA;
     202:	e4 e4       	ldi	r30, 0x44	; 68
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	10 86       	std	Z+8, r1	; 0x08
	gs_str_keypad_config.str_col_pins[0].enu_pin  = PIN4;
     208:	e1 86       	std	Z+9, r14	; 0x09
	
	gs_str_keypad_config.str_col_pins[1].enu_port = PORTA;
     20a:	12 86       	std	Z+10, r1	; 0x0a
	gs_str_keypad_config.str_col_pins[1].enu_pin  = PIN5;
     20c:	f3 86       	std	Z+11, r15	; 0x0b
	
	gs_str_keypad_config.str_col_pins[2].enu_port = PORTA;
     20e:	14 86       	std	Z+12, r1	; 0x0c
	gs_str_keypad_config.str_col_pins[2].enu_pin  = PIN6;
     210:	05 87       	std	Z+13, r16	; 0x0d
	
	
	gs_str_keypad_config.str_row_pins[0].enu_port = PORTA;
     212:	10 82       	st	Z, r1
	gs_str_keypad_config.str_row_pins[0].enu_pin  = PIN0;
     214:	11 82       	std	Z+1, r1	; 0x01
	
	gs_str_keypad_config.str_row_pins[1].enu_port = PORTA;
     216:	12 82       	std	Z+2, r1	; 0x02
	gs_str_keypad_config.str_row_pins[1].enu_pin  = PIN1 ;
     218:	d3 83       	std	Z+3, r29	; 0x03
	
	gs_str_keypad_config.str_row_pins[2].enu_port = PORTA;
     21a:	14 82       	std	Z+4, r1	; 0x04
	gs_str_keypad_config.str_row_pins[2].enu_pin  = PIN2 ;
     21c:	c5 83       	std	Z+5, r28	; 0x05
	
	gs_str_keypad_config.str_row_pins[3].enu_port = PORTA;
     21e:	16 82       	std	Z+6, r1	; 0x06
	gs_str_keypad_config.str_row_pins[3].enu_pin  = PIN3 ;
     220:	17 83       	std	Z+7, r17	; 0x07
	
	KEYPAD_init(&gs_str_keypad_config);
     222:	cf 01       	movw	r24, r30
     224:	0e 94 3a 03 	call	0x674	; 0x674 <KEYPAD_init>
	
	
	// Initialize Buzzer
	gs_str_buzzer_config.enu_port = PORTB;
     228:	ef ef       	ldi	r30, 0xFF	; 255
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	d0 83       	st	Z, r29
	gs_str_buzzer_config.enu_pin = PIN0;
     22e:	11 82       	std	Z+1, r1	; 0x01
	BUZZER_init(&gs_str_buzzer_config);
     230:	cf 01       	movw	r24, r30
     232:	0e 94 00 03 	call	0x600	; 0x600 <BUZZER_init>
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	08 95       	ret

00000244 <APP_welcome>:

void APP_welcome(void)
{
	LCD_clear(&gs_str_lcd_config);
     244:	88 e2       	ldi	r24, 0x28	; 40
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
	
	LCD_writeString(&gs_str_lcd_config,(uint8_t*)"Welcome");
     258:	6d e6       	ldi	r22, 0x6D	; 109
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	88 e2       	ldi	r24, 0x28	; 40
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	delay_half_sec(APP_DELAY_1_S);
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	0e 94 9d 00 	call	0x13a	; 0x13a <delay_half_sec>
	
	LCD_clear(&gs_str_lcd_config);
     26a:	88 e2       	ldi	r24, 0x28	; 40
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	88 e2       	ldi	r24, 0x28	; 40
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
	
	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"default Temp is");
     27e:	65 e7       	ldi	r22, 0x75	; 117
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	88 e2       	ldi	r24, 0x28	; 40
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2,LCD_COL_1);
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	88 e2       	ldi	r24, 0x28	; 40
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>

	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"20");
     296:	6f ec       	ldi	r22, 0xCF	; 207
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	88 e2       	ldi	r24, 0x28	; 40
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	delay_half_sec(APP_DELAY_1_S);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 9d 00 	call	0x13a	; 0x13a <delay_half_sec>

	
	u8_gs_programTemp = u8_gc_defaultTemp;
     2a8:	84 e1       	ldi	r24, 0x14	; 20
     2aa:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
	u8_en_gs_programState = APP_SET_TEMP;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <u8_en_gs_programState>
     2b4:	08 95       	ret

000002b6 <APP_set>:
}

void APP_set(void)
{
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <APP_set+0x8>
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <APP_set+0xa>
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_loadingChar[] = "|";
     2c6:	8c e7       	ldi	r24, 0x7C	; 124
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t u8_emptyChar[] = " ";
     2ce:	80 e2       	ldi	r24, 0x20	; 32
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9c 83       	std	Y+4, r25	; 0x04
     2d4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_keypadData = 0;
     2d6:	1d 82       	std	Y+5, r1	; 0x05
	

	LCD_clear(&gs_str_lcd_config);
     2d8:	88 e2       	ldi	r24, 0x28	; 40
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
	
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>


	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Set Initial Temp");
     2ec:	65 e8       	ldi	r22, 0x85	; 133
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	88 e2       	ldi	r24, 0x28	; 40
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	delay_half_sec(APP_DELAY_0_5_S);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 9d 00 	call	0x13a	; 0x13a <delay_half_sec>

	LCD_clear(&gs_str_lcd_config);
     2fe:	88 e2       	ldi	r24, 0x28	; 40
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>

	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Min=18");
     312:	66 e9       	ldi	r22, 0x96	; 150
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	88 e2       	ldi	r24, 0x28	; 40
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_11);
     31e:	4a e0       	ldi	r20, 0x0A	; 10
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	88 e2       	ldi	r24, 0x28	; 40
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Max=35");
     32a:	6d e9       	ldi	r22, 0x9D	; 157
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	88 e2       	ldi	r24, 0x28	; 40
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	
	for (uint8_t u8_index = 19 ; u8_index <= u8_gs_programTemp ;u8_index++)
     336:	13 e1       	ldi	r17, 0x13	; 19
     338:	0f c0       	rjmp	.+30     	; 0x358 <APP_set+0xa2>
	{
		
		LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2,u8_index-19);
     33a:	4d ee       	ldi	r20, 0xED	; 237
     33c:	41 0f       	add	r20, r17
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
		LCD_writeString(&gs_str_lcd_config, (uint8_t*)u8_loadingChar);
     348:	be 01       	movw	r22, r28
     34a:	6f 5f       	subi	r22, 0xFF	; 255
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	88 e2       	ldi	r24, 0x28	; 40
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>

	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Min=18");
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_11);
	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Max=35");
	
	for (uint8_t u8_index = 19 ; u8_index <= u8_gs_programTemp ;u8_index++)
     356:	1f 5f       	subi	r17, 0xFF	; 255
     358:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end>
     35c:	81 17       	cp	r24, r17
     35e:	68 f7       	brcc	.-38     	; 0x33a <APP_set+0x84>
		LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2,u8_index-19);
		LCD_writeString(&gs_str_lcd_config, (uint8_t*)u8_loadingChar);
	}
	while(1)
	{
		intToString(u8_gs_programTemp, gs_ptr_str_curTempToString);
     360:	6f e3       	ldi	r22, 0x3F	; 63
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end>
     368:	0e 94 65 00 	call	0xca	; 0xca <intToString>
		LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_8);
     36c:	47 e0       	ldi	r20, 0x07	; 7
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	88 e2       	ldi	r24, 0x28	; 40
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
		LCD_writeString(&gs_str_lcd_config, gs_ptr_str_curTempToString);
     378:	6f e3       	ldi	r22, 0x3F	; 63
     37a:	71 e0       	ldi	r23, 0x01	; 1
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
		
		KEYPAD_read(&gs_str_keypad_config, &u8_keypadData);
     384:	be 01       	movw	r22, r28
     386:	6b 5f       	subi	r22, 0xFB	; 251
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	84 e4       	ldi	r24, 0x44	; 68
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 83 03 	call	0x706	; 0x706 <KEYPAD_read>
		
		if (u8_keypadData == APP_INCREMENT_BTN)
     392:	8d 81       	ldd	r24, Y+5	; 0x05
     394:	81 33       	cpi	r24, 0x31	; 49
     396:	b1 f4       	brne	.+44     	; 0x3c4 <APP_set+0x10e>
		{

			if (u8_gs_programTemp < 35)
     398:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <__data_end>
     39c:	43 32       	cpi	r20, 0x23	; 35
     39e:	00 f7       	brcc	.-64     	; 0x360 <APP_set+0xaa>
			{
				u8_gs_programTemp++;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	84 0f       	add	r24, r20
     3a4:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
				
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2, u8_gs_programTemp-19);
     3a8:	42 51       	subi	r20, 0x12	; 18
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	88 e2       	ldi	r24, 0x28	; 40
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)u8_loadingChar);
     3b4:	be 01       	movw	r22, r28
     3b6:	6f 5f       	subi	r22, 0xFF	; 255
     3b8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ba:	88 e2       	ldi	r24, 0x28	; 40
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
     3c2:	ce cf       	rjmp	.-100    	; 0x360 <APP_set+0xaa>
			}
		}
		else if (u8_keypadData == APP_DECREMENT_BTN)
     3c4:	82 33       	cpi	r24, 0x32	; 50
     3c6:	b1 f4       	brne	.+44     	; 0x3f4 <APP_set+0x13e>
		{
			// Decrement
			if (u8_gs_programTemp >18)
     3c8:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <__data_end>
     3cc:	43 31       	cpi	r20, 0x13	; 19
     3ce:	40 f2       	brcs	.-112    	; 0x360 <APP_set+0xaa>
			{
				u8_gs_programTemp--;
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	84 0f       	add	r24, r20
     3d4:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2, u8_gs_programTemp-18);
     3d8:	43 51       	subi	r20, 0x13	; 19
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)u8_emptyChar);
     3e4:	be 01       	movw	r22, r28
     3e6:	6d 5f       	subi	r22, 0xFD	; 253
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
     3f2:	b6 cf       	rjmp	.-148    	; 0x360 <APP_set+0xaa>
			}
		}
		else if (u8_keypadData == APP_SET_BTN)
     3f4:	83 33       	cpi	r24, 0x33	; 51
     3f6:	09 f0       	breq	.+2      	; 0x3fa <APP_set+0x144>
     3f8:	b3 cf       	rjmp	.-154    	; 0x360 <APP_set+0xaa>
		{
			// Set
			u8_en_gs_programState = APP_WORKING;
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <u8_en_gs_programState>
		else{
			// do nothing
		}
	}
	
}
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	08 95       	ret

00000412 <APP_working>:

void APP_working(void)
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	1f 92       	push	r1
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
     41c:	19 82       	std	Y+1, r1	; 0x01
	
	// print current temp
	LCD_clear(&gs_str_lcd_config);
     41e:	88 e2       	ldi	r24, 0x28	; 40
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	88 e2       	ldi	r24, 0x28	; 40
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Current Temp = ");
     432:	64 ea       	ldi	r22, 0xA4	; 164
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	88 e2       	ldi	r24, 0x28	; 40
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	
	
	while(u8_en_gs_programState == APP_WORKING)
     43e:	b9 c0       	rjmp	.+370    	; 0x5b2 <APP_working+0x1a0>
	{
		// read the temp from the sensor
		LM35_read_temp(&gs_str_lm35_str_channel_config, &gs_lm35_str_config, &gs_d_curTemp);		
     440:	40 e6       	ldi	r20, 0x60	; 96
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	63 e0       	ldi	r22, 0x03	; 3
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LM35_read_temp>
		LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2,LCD_COL_2);
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	88 e2       	ldi	r24, 0x28	; 40
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
		intToString((uint8_t)gs_d_curTemp,gs_ptr_str_curTempToString);
     45c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     460:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
     464:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
     468:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_start+0x3>
     46c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__fixunssfsi>
     470:	86 2f       	mov	r24, r22
     472:	6f e3       	ldi	r22, 0x3F	; 63
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	0e 94 65 00 	call	0xca	; 0xca <intToString>
		LCD_writeString(&gs_str_lcd_config, gs_ptr_str_curTempToString);
     47a:	6f e3       	ldi	r22, 0x3F	; 63
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	88 e2       	ldi	r24, 0x28	; 40
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
		//APP_printString(gs_d_curTemp);
		//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
		if (gs_d_curTemp > u8_gs_programTemp)
     486:	60 91 fc 00 	lds	r22, 0x00FC	; 0x8000fc <__data_end>
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__floatsisf>
     494:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     498:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     49c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
     4a0:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
     4a4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__cmpsf2>
     4a8:	88 23       	and	r24, r24
     4aa:	44 f4       	brge	.+16     	; 0x4bc <APP_working+0xaa>
		{
			
			LCD_writeSpChar(&gs_str_lcd_config, LCD_BELL);
     4ac:	63 e0       	ldi	r22, 0x03	; 3
     4ae:	88 e2       	ldi	r24, 0x28	; 40
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_writeSpChar>
			
			
			// start the BUZZER
			BUZZER_start();
     4b6:	0e 94 1c 03 	call	0x638	; 0x638 <BUZZER_start>
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <APP_working+0xc6>
		}
		else{
			LCD_setCursor(&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	88 e2       	ldi	r24, 0x28	; 40
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
			LCD_writeString(&gs_str_lcd_config, (uint8_t*)" ");
     4c8:	62 eb       	ldi	r22, 0xB2	; 178
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	88 e2       	ldi	r24, 0x28	; 40
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
			BUZZER_stop();
     4d4:	0e 94 2b 03 	call	0x656	; 0x656 <BUZZER_stop>
		}
		
		KEYPAD_read(&gs_str_keypad_config, &u8_keypadData);
     4d8:	be 01       	movw	r22, r28
     4da:	6f 5f       	subi	r22, 0xFF	; 255
     4dc:	7f 4f       	sbci	r23, 0xFF	; 255
     4de:	84 e4       	ldi	r24, 0x44	; 68
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 83 03 	call	0x706	; 0x706 <KEYPAD_read>
		switch(u8_keypadData)
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	85 33       	cpi	r24, 0x35	; 53
     4ea:	31 f0       	breq	.+12     	; 0x4f8 <APP_working+0xe6>
     4ec:	8e 34       	cpi	r24, 0x4E	; 78
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <APP_working+0xe0>
     4f0:	60 c0       	rjmp	.+192    	; 0x5b2 <APP_working+0x1a0>
     4f2:	84 33       	cpi	r24, 0x34	; 52
     4f4:	79 f5       	brne	.+94     	; 0x554 <APP_working+0x142>
     4f6:	28 c0       	rjmp	.+80     	; 0x548 <APP_working+0x136>
			case  APP_NO_BTN :
				break;
			case  APP_RESET_BTN :
				// reset
				// Stop the BUZZER
				BUZZER_stop();
     4f8:	0e 94 2b 03 	call	0x656	; 0x656 <BUZZER_stop>
				
				// Set the program temp with the default temp
				u8_gs_programTemp = u8_gc_defaultTemp;
     4fc:	84 e1       	ldi	r24, 0x14	; 20
     4fe:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
				
				// clear LCD and print Temp value is resettled to 20
				LCD_clear(&gs_str_lcd_config);
     502:	88 e2       	ldi	r24, 0x28	; 40
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	88 e2       	ldi	r24, 0x28	; 40
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Temp value is");
     516:	64 eb       	ldi	r22, 0xB4	; 180
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	88 e2       	ldi	r24, 0x28	; 40
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2,LCD_COL_1);
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	88 e2       	ldi	r24, 0x28	; 40
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)"resettled to 20");
     52e:	62 ec       	ldi	r22, 0xC2	; 194
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	88 e2       	ldi	r24, 0x28	; 40
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
				delay_half_sec(APP_DELAY_1_S);
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	0e 94 9d 00 	call	0x13a	; 0x13a <delay_half_sec>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <u8_en_gs_programState>
				break;
     546:	35 c0       	rjmp	.+106    	; 0x5b2 <APP_working+0x1a0>
			
			case APP_ADJUST_BTN : 
				// adjust
				
				// Stop the BUZZER
				BUZZER_stop();
     548:	0e 94 2b 03 	call	0x656	; 0x656 <BUZZER_stop>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <u8_en_gs_programState>
				break;
     552:	2f c0       	rjmp	.+94     	; 0x5b2 <APP_working+0x1a0>
			default:
				
				// Invalid button
				LCD_clear(&gs_str_lcd_config);
     554:	88 e2       	ldi	r24, 0x28	; 40
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	88 e2       	ldi	r24, 0x28	; 40
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)"the operation is");
     568:	62 ed       	ldi	r22, 0xD2	; 210
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	88 e2       	ldi	r24, 0x28	; 40
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_2,LCD_COL_1);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	88 e2       	ldi	r24, 0x28	; 40
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)"not allowed");
     580:	63 ee       	ldi	r22, 0xE3	; 227
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	88 e2       	ldi	r24, 0x28	; 40
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
				delay_half_sec(APP_DELAY_1_S);
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 9d 00 	call	0x13a	; 0x13a <delay_half_sec>
				
				// print current temp
				LCD_clear(&gs_str_lcd_config);
     592:	88 e2       	ldi	r24, 0x28	; 40
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_clear>
				LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	88 e2       	ldi	r24, 0x28	; 40
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_setCursor>
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Current Temp = ");
     5a6:	64 ea       	ldi	r22, 0xA4	; 164
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	88 e2       	ldi	r24, 0x28	; 40
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 1a 07 	call	0xe34	; 0xe34 <LCD_writeString>
	LCD_clear(&gs_str_lcd_config);
	LCD_setCursor(&gs_str_lcd_config,LCD_ROW_1,LCD_COL_1);
	LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Current Temp = ");
	
	
	while(u8_en_gs_programState == APP_WORKING)
     5b2:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <u8_en_gs_programState>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	09 f4       	brne	.+2      	; 0x5bc <APP_working+0x1aa>
     5ba:	42 cf       	rjmp	.-380    	; 0x440 <APP_working+0x2e>
				LCD_writeString(&gs_str_lcd_config, (uint8_t*)"Current Temp = ");
				break;
		}
	}
	
}
     5bc:	0f 90       	pop	r0
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <APP_start>:


void APP_start(void)
{
	
	APP_init();
     5c4:	0e 94 be 00 	call	0x17c	; 0x17c <APP_init>
												
	TIMER_MANGER_start(gs_str_timer_1_config.enu_prescaller,gs_str_timer_1_config.enu_timer_no);
     5c8:	e7 e0       	ldi	r30, 0x07	; 7
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	60 81       	ld	r22, Z
     5ce:	80 85       	ldd	r24, Z+8	; 0x08
     5d0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TIMER_MANGER_start>
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <APP_start+0x16>
	
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
     5d6:	0e 94 22 01 	call	0x244	; 0x244 <APP_welcome>
												
	TIMER_MANGER_start(gs_str_timer_1_config.enu_prescaller,gs_str_timer_1_config.enu_timer_no);
	
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
     5da:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <u8_en_gs_programState>
     5de:	81 11       	cpse	r24, r1
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <APP_start+0x24>
     5e2:	f9 cf       	rjmp	.-14     	; 0x5d6 <APP_start+0x12>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
     5e4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
     5e8:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <u8_en_gs_programState>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	d1 f3       	breq	.-12     	; 0x5e4 <APP_start+0x20>
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <APP_start+0x32>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
     5f2:	0e 94 09 02 	call	0x412	; 0x412 <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
     5f6:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <u8_en_gs_programState>
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	d1 f3       	breq	.-12     	; 0x5f2 <APP_start+0x2e>
     5fe:	ed cf       	rjmp	.-38     	; 0x5da <APP_start+0x16>

00000600 <BUZZER_init>:
 */
static buzzer_enu_state_init_t enu_gs_buzzerState = BUZZER_NOT_INIT;


buzzer_enu_return_state_t BUZZER_init (buzzer_str_config_t* ptr_str_buzzer_config)
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
	buzzer_enu_return_state_t enu_return_state = BUZZER_E_OK;
	dio_enu_return_state_t	enu_dio_return_state = DIO_OK;
	if (ptr_str_buzzer_config != NULL){
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	91 f0       	breq	.+36     	; 0x62c <BUZZER_init+0x2c>
     608:	ec 01       	movw	r28, r24

		enu_dio_return_state = DIO_init(ptr_str_buzzer_config->enu_port, ptr_str_buzzer_config->enu_pin, DIO_PIN_OUTPUT);
     60a:	69 81       	ldd	r22, Y+1	; 0x01
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	88 81       	ld	r24, Y
     610:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
		if(enu_dio_return_state != DIO_OK){
     614:	81 11       	cpse	r24, r1
     616:	0c c0       	rjmp	.+24     	; 0x630 <BUZZER_init+0x30>
			enu_return_state = BUZZER_E_NOT_OK;
		}else{
			st_gs_buzzerConfig.enu_port = ptr_str_buzzer_config->enu_port;
     618:	88 81       	ld	r24, Y
     61a:	e0 e1       	ldi	r30, 0x10	; 16
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	80 83       	st	Z, r24
			st_gs_buzzerConfig.enu_pin = ptr_str_buzzer_config->enu_pin;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	81 83       	std	Z+1, r24	; 0x01
			enu_gs_buzzerState = BUZZER_INIT;	
     624:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <enu_gs_buzzerState>
static buzzer_enu_state_init_t enu_gs_buzzerState = BUZZER_NOT_INIT;


buzzer_enu_return_state_t BUZZER_init (buzzer_str_config_t* ptr_str_buzzer_config)
{
	buzzer_enu_return_state_t enu_return_state = BUZZER_E_OK;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	03 c0       	rjmp	.+6      	; 0x632 <BUZZER_init+0x32>
			st_gs_buzzerConfig.enu_pin = ptr_str_buzzer_config->enu_pin;
			enu_gs_buzzerState = BUZZER_INIT;	
		}
		
	}else{
		enu_return_state = BUZZER_NULL_PTR;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	01 c0       	rjmp	.+2      	; 0x632 <BUZZER_init+0x32>
	dio_enu_return_state_t	enu_dio_return_state = DIO_OK;
	if (ptr_str_buzzer_config != NULL){

		enu_dio_return_state = DIO_init(ptr_str_buzzer_config->enu_port, ptr_str_buzzer_config->enu_pin, DIO_PIN_OUTPUT);
		if(enu_dio_return_state != DIO_OK){
			enu_return_state = BUZZER_E_NOT_OK;
     630:	81 e0       	ldi	r24, 0x01	; 1
		
	}else{
		enu_return_state = BUZZER_NULL_PTR;
	}
	return enu_return_state;
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <BUZZER_start>:

buzzer_enu_return_state_t BUZZER_start(void)
{
	buzzer_enu_return_state_t enu_return_state = BUZZER_E_OK;
	if(enu_gs_buzzerState != BUZZER_NOT_INIT){
     638:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <enu_gs_buzzerState>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	49 f0       	breq	.+18     	; 0x652 <BUZZER_start+0x1a>
		DIO_write_pin(st_gs_buzzerConfig.enu_port,st_gs_buzzerConfig.enu_pin, DIO_PIN_HIGH_LEVEL);
     640:	e0 e1       	ldi	r30, 0x10	; 16
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	61 81       	ldd	r22, Z+1	; 0x01
     648:	80 81       	ld	r24, Z
     64a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	return enu_return_state;
}

buzzer_enu_return_state_t BUZZER_start(void)
{
	buzzer_enu_return_state_t enu_return_state = BUZZER_E_OK;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	08 95       	ret
	if(enu_gs_buzzerState != BUZZER_NOT_INIT){
		DIO_write_pin(st_gs_buzzerConfig.enu_port,st_gs_buzzerConfig.enu_pin, DIO_PIN_HIGH_LEVEL);
		
	}else{
		enu_return_state = BUZZER_E_NOT_OK;
     652:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_return_state;
}
     654:	08 95       	ret

00000656 <BUZZER_stop>:

buzzer_enu_return_state_t BUZZER_stop(void)
{
	buzzer_enu_return_state_t enu_return_state = BUZZER_E_OK;
	if(enu_gs_buzzerState != BUZZER_NOT_INIT){
     656:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <enu_gs_buzzerState>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	49 f0       	breq	.+18     	; 0x670 <BUZZER_stop+0x1a>
		DIO_write_pin(st_gs_buzzerConfig.enu_port,st_gs_buzzerConfig.enu_pin, DIO_PIN_LOW_LEVEL);
     65e:	e0 e1       	ldi	r30, 0x10	; 16
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	61 81       	ldd	r22, Z+1	; 0x01
     666:	80 81       	ld	r24, Z
     668:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	return enu_return_state;
}

buzzer_enu_return_state_t BUZZER_stop(void)
{
	buzzer_enu_return_state_t enu_return_state = BUZZER_E_OK;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	08 95       	ret
	if(enu_gs_buzzerState != BUZZER_NOT_INIT){
		DIO_write_pin(st_gs_buzzerConfig.enu_port,st_gs_buzzerConfig.enu_pin, DIO_PIN_LOW_LEVEL);
		
	}else{
		enu_return_state = BUZZER_E_NOT_OK;
     670:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_return_state;
     672:	08 95       	ret

00000674 <KEYPAD_init>:
    {'*', '0', '#'}
};
	

keypad_enu_return_state_t KEYPAD_init(keypad_str_config_t *ptr_str_keypad_config)
{
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
	keypad_enu_return_state_t enu_return_state = KEYPAD_E_OK;
	if(ptr_str_keypad_config == NULL)
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	b9 f1       	breq	.+110    	; 0x6f4 <KEYPAD_init+0x80>
     686:	8c 01       	movw	r16, r24
     688:	f1 2c       	mov	r15, r1
     68a:	11 c0       	rjmp	.+34     	; 0x6ae <KEYPAD_init+0x3a>
	}
	else
	{
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_ROWS_MAX; u8_counter++){
			DIO_init(ptr_str_keypad_config->str_row_pins[u8_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_counter].enu_pin, DIO_PIN_INPUT);
     68c:	cf 2d       	mov	r28, r15
     68e:	d0 e0       	ldi	r29, 0x00	; 0
     690:	cc 0f       	add	r28, r28
     692:	dd 1f       	adc	r29, r29
     694:	c0 0f       	add	r28, r16
     696:	d1 1f       	adc	r29, r17
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	69 81       	ldd	r22, Y+1	; 0x01
     69c:	88 81       	ld	r24, Y
     69e:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
			DIO_write_pin(ptr_str_keypad_config->str_row_pins[u8_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	69 81       	ldd	r22, Y+1	; 0x01
     6a6:	88 81       	ld	r24, Y
     6a8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
		enu_return_state=KEYPAD_E_NOT_OK;
	}
	else
	{
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_ROWS_MAX; u8_counter++){
     6ac:	f3 94       	inc	r15
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	8f 15       	cp	r24, r15
     6b2:	60 f7       	brcc	.-40     	; 0x68c <KEYPAD_init+0x18>
     6b4:	d1 2c       	mov	r13, r1
     6b6:	19 c0       	rjmp	.+50     	; 0x6ea <KEYPAD_init+0x76>
			DIO_init(ptr_str_keypad_config->str_row_pins[u8_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_counter].enu_pin, DIO_PIN_INPUT);
			DIO_write_pin(ptr_str_keypad_config->str_row_pins[u8_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
		}
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_COLS_MAX; u8_counter++){
			DIO_init(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
     6b8:	cd 2d       	mov	r28, r13
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	7e 01       	movw	r14, r28
     6be:	ee 0c       	add	r14, r14
     6c0:	ff 1c       	adc	r15, r15
     6c2:	e0 0e       	add	r14, r16
     6c4:	f1 1e       	adc	r15, r17
     6c6:	24 96       	adiw	r28, 0x04	; 4
     6c8:	cc 0f       	add	r28, r28
     6ca:	dd 1f       	adc	r29, r29
     6cc:	c0 0f       	add	r28, r16
     6ce:	d1 1f       	adc	r29, r17
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	f7 01       	movw	r30, r14
     6d4:	61 85       	ldd	r22, Z+9	; 0x09
     6d6:	88 81       	ld	r24, Y
     6d8:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	f7 01       	movw	r30, r14
     6e0:	61 85       	ldd	r22, Z+9	; 0x09
     6e2:	88 81       	ld	r24, Y
     6e4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_ROWS_MAX; u8_counter++){
			DIO_init(ptr_str_keypad_config->str_row_pins[u8_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_counter].enu_pin, DIO_PIN_INPUT);
			DIO_write_pin(ptr_str_keypad_config->str_row_pins[u8_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
		}
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_COLS_MAX; u8_counter++){
     6e8:	d3 94       	inc	r13
     6ea:	f2 e0       	ldi	r31, 0x02	; 2
     6ec:	fd 15       	cp	r31, r13
     6ee:	20 f7       	brcc	.-56     	; 0x6b8 <KEYPAD_init+0x44>
};
	

keypad_enu_return_state_t KEYPAD_init(keypad_str_config_t *ptr_str_keypad_config)
{
	keypad_enu_return_state_t enu_return_state = KEYPAD_E_OK;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <KEYPAD_init+0x82>
	if(ptr_str_keypad_config == NULL)
	{
		enu_return_state=KEYPAD_E_NOT_OK;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
			DIO_init(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
		}
	}
	return enu_return_state;
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	08 95       	ret

00000706 <KEYPAD_read>:


keypad_enu_return_state_t KEYPAD_read (keypad_str_config_t *ptr_str_keypad_config, uint8_t *ptr_u8_data){
     706:	7f 92       	push	r7
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	1f 92       	push	r1
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	8c 01       	movw	r16, r24
     728:	5b 01       	movw	r10, r22
	uint8_t	u8_catched_data_flag = U8_ZERO_VALUE;
	dio_enu_level_t enu_pin_level;
	

	
	if((ptr_str_keypad_config == NULL) || (ptr_u8_data == NULL)){
     72a:	89 2b       	or	r24, r25
     72c:	09 f4       	brne	.+2      	; 0x730 <KEYPAD_read+0x2a>
     72e:	82 c0       	rjmp	.+260    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     730:	67 2b       	or	r22, r23
     732:	09 f4       	brne	.+2      	; 0x736 <KEYPAD_read+0x30>
     734:	82 c0       	rjmp	.+260    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     736:	f1 2c       	mov	r15, r1
     738:	14 c0       	rjmp	.+40     	; 0x762 <KEYPAD_read+0x5c>
		enu_return_state = KEYPAD_NULL_PTR;
	}else{
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_COLS_MAX; u8_counter++){
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
     73a:	8f 2d       	mov	r24, r15
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	dc 01       	movw	r26, r24
     740:	aa 0f       	add	r26, r26
     742:	bb 1f       	adc	r27, r27
     744:	a0 0f       	add	r26, r16
     746:	b1 1f       	adc	r27, r17
     748:	fc 01       	movw	r30, r24
     74a:	34 96       	adiw	r30, 0x04	; 4
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	e0 0f       	add	r30, r16
     752:	f1 1f       	adc	r31, r17
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	19 96       	adiw	r26, 0x09	; 9
     758:	6c 91       	ld	r22, X
     75a:	80 81       	ld	r24, Z
     75c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	
	if((ptr_str_keypad_config == NULL) || (ptr_u8_data == NULL)){
		enu_return_state = KEYPAD_NULL_PTR;
	}else{
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_COLS_MAX; u8_counter++){
     760:	f3 94       	inc	r15
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	8f 15       	cp	r24, r15
     766:	48 f7       	brcc	.-46     	; 0x73a <KEYPAD_read+0x34>
     768:	71 2c       	mov	r7, r1
     76a:	81 2c       	mov	r8, r1
     76c:	5b c0       	rjmp	.+182    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
		}
		
		for(u8_col_counter = U8_ZERO_VALUE; (u8_col_counter < KEYPAD_COLS_MAX) && (u8_catched_data_flag != U8_ONE_VALUE); u8_col_counter++)
		{
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_pin, DIO_PIN_LOW_LEVEL);
     76e:	e8 2c       	mov	r14, r8
     770:	f1 2c       	mov	r15, r1
     772:	d7 01       	movw	r26, r14
     774:	aa 0f       	add	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	a0 0f       	add	r26, r16
     77a:	b1 1f       	adc	r27, r17
     77c:	f7 01       	movw	r30, r14
     77e:	34 96       	adiw	r30, 0x04	; 4
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e0 0f       	add	r30, r16
     786:	f1 1f       	adc	r31, r17
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	19 96       	adiw	r26, 0x09	; 9
     78c:	6c 91       	ld	r22, X
     78e:	80 81       	ld	r24, Z
     790:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
			for(u8_row_counter = U8_ZERO_VALUE; u8_row_counter<KEYPAD_ROWS_MAX; u8_row_counter++)
     794:	91 2c       	mov	r9, r1
     796:	31 c0       	rjmp	.+98     	; 0x7fa <KEYPAD_read+0xf4>
			{
				DIO_read_pin(ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_pin, &enu_pin_level);
     798:	c9 2c       	mov	r12, r9
     79a:	d1 2c       	mov	r13, r1
     79c:	f6 01       	movw	r30, r12
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e0 0f       	add	r30, r16
     7a4:	f1 1f       	adc	r31, r17
     7a6:	ae 01       	movw	r20, r28
     7a8:	4f 5f       	subi	r20, 0xFF	; 255
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	61 81       	ldd	r22, Z+1	; 0x01
     7ae:	80 81       	ld	r24, Z
     7b0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <DIO_read_pin>
				if(enu_pin_level == DIO_PIN_LOW_LEVEL)
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	81 11       	cpse	r24, r1
     7b8:	1f c0       	rjmp	.+62     	; 0x7f8 <KEYPAD_read+0xf2>
     7ba:	0c c0       	rjmp	.+24     	; 0x7d4 <KEYPAD_read+0xce>
				{
					while(enu_pin_level == DIO_PIN_LOW_LEVEL)
					{
						DIO_read_pin(ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_pin, &enu_pin_level);
     7bc:	f6 01       	movw	r30, r12
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e0 0f       	add	r30, r16
     7c4:	f1 1f       	adc	r31, r17
     7c6:	ae 01       	movw	r20, r28
     7c8:	4f 5f       	subi	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	61 81       	ldd	r22, Z+1	; 0x01
     7ce:	80 81       	ld	r24, Z
     7d0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <DIO_read_pin>
			for(u8_row_counter = U8_ZERO_VALUE; u8_row_counter<KEYPAD_ROWS_MAX; u8_row_counter++)
			{
				DIO_read_pin(ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_pin, &enu_pin_level);
				if(enu_pin_level == DIO_PIN_LOW_LEVEL)
				{
					while(enu_pin_level == DIO_PIN_LOW_LEVEL)
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	88 23       	and	r24, r24
     7d8:	89 f3       	breq	.-30     	; 0x7bc <KEYPAD_read+0xb6>
					{
						DIO_read_pin(ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_port, ptr_str_keypad_config->str_row_pins[u8_row_counter].enu_pin, &enu_pin_level);
					}
					*ptr_u8_data = keypad[u8_row_counter][u8_col_counter];
     7da:	f6 01       	movw	r30, r12
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	ec 0d       	add	r30, r12
     7e2:	fd 1d       	adc	r31, r13
     7e4:	e1 51       	subi	r30, 0x11	; 17
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	ee 0d       	add	r30, r14
     7ea:	ff 1d       	adc	r31, r15
     7ec:	80 81       	ld	r24, Z
     7ee:	f5 01       	movw	r30, r10
     7f0:	80 83       	st	Z, r24
					u8_catched_data_flag = U8_ONE_VALUE;
     7f2:	77 24       	eor	r7, r7
     7f4:	73 94       	inc	r7
					break;
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
		}
		
		for(u8_col_counter = U8_ZERO_VALUE; (u8_col_counter < KEYPAD_COLS_MAX) && (u8_catched_data_flag != U8_ONE_VALUE); u8_col_counter++)
		{
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_pin, DIO_PIN_LOW_LEVEL);
			for(u8_row_counter = U8_ZERO_VALUE; u8_row_counter<KEYPAD_ROWS_MAX; u8_row_counter++)
     7f8:	93 94       	inc	r9
     7fa:	f3 e0       	ldi	r31, 0x03	; 3
     7fc:	f9 15       	cp	r31, r9
     7fe:	60 f6       	brcc	.-104    	; 0x798 <KEYPAD_read+0x92>
					u8_catched_data_flag = U8_ONE_VALUE;
					break;
				}
				
			}
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
     800:	d7 01       	movw	r26, r14
     802:	aa 0f       	add	r26, r26
     804:	bb 1f       	adc	r27, r27
     806:	a0 0f       	add	r26, r16
     808:	b1 1f       	adc	r27, r17
     80a:	f7 01       	movw	r30, r14
     80c:	34 96       	adiw	r30, 0x04	; 4
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	e0 0f       	add	r30, r16
     814:	f1 1f       	adc	r31, r17
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	19 96       	adiw	r26, 0x09	; 9
     81a:	6c 91       	ld	r22, X
     81c:	80 81       	ld	r24, Z
     81e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < KEYPAD_COLS_MAX; u8_counter++){
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
		}
		
		for(u8_col_counter = U8_ZERO_VALUE; (u8_col_counter < KEYPAD_COLS_MAX) && (u8_catched_data_flag != U8_ONE_VALUE); u8_col_counter++)
     822:	83 94       	inc	r8
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	88 15       	cp	r24, r8
     828:	58 f0       	brcs	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	79 12       	cpse	r7, r25
     82e:	9f cf       	rjmp	.-194    	; 0x76e <KEYPAD_read+0x68>
}


keypad_enu_return_state_t KEYPAD_read (keypad_str_config_t *ptr_str_keypad_config, uint8_t *ptr_u8_data){
	
	keypad_enu_return_state_t enu_return_state=KEYPAD_E_OK;
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	07 c0       	rjmp	.+14     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	uint8_t u8_col_counter;
	uint8_t u8_row_counter;
	uint8_t	u8_catched_data_flag = U8_ZERO_VALUE;
     834:	71 2c       	mov	r7, r1
	dio_enu_level_t enu_pin_level;
	

	
	if((ptr_str_keypad_config == NULL) || (ptr_u8_data == NULL)){
		enu_return_state = KEYPAD_NULL_PTR;
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	04 c0       	rjmp	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
keypad_enu_return_state_t KEYPAD_read (keypad_str_config_t *ptr_str_keypad_config, uint8_t *ptr_u8_data){
	
	keypad_enu_return_state_t enu_return_state=KEYPAD_E_OK;
	uint8_t u8_col_counter;
	uint8_t u8_row_counter;
	uint8_t	u8_catched_data_flag = U8_ZERO_VALUE;
     83a:	71 2c       	mov	r7, r1
	dio_enu_level_t enu_pin_level;
	

	
	if((ptr_str_keypad_config == NULL) || (ptr_u8_data == NULL)){
		enu_return_state = KEYPAD_NULL_PTR;
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
}


keypad_enu_return_state_t KEYPAD_read (keypad_str_config_t *ptr_str_keypad_config, uint8_t *ptr_u8_data){
	
	keypad_enu_return_state_t enu_return_state=KEYPAD_E_OK;
     840:	80 e0       	ldi	r24, 0x00	; 0
			DIO_write_pin(ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_port, ptr_str_keypad_config->str_col_pins[u8_col_counter].enu_pin, DIO_PIN_HIGH_LEVEL);
		}
		
	}
	
	if(u8_catched_data_flag != U8_ONE_VALUE)
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	7e 16       	cp	r7, r30
     846:	21 f0       	breq	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	{   
		*ptr_u8_data = 'N';
     848:	8e e4       	ldi	r24, 0x4E	; 78
     84a:	f5 01       	movw	r30, r10
     84c:	80 83       	st	Z, r24
		enu_return_state = KEYPAD_NO_DATA;
     84e:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		
	}
	return enu_return_state;
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
     866:	9f 90       	pop	r9
     868:	8f 90       	pop	r8
     86a:	7f 90       	pop	r7
     86c:	08 95       	ret

0000086e <delay_3_ms>:
	DIO_write_pin(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_LOW_LEVEL);


}

void delay_3_ms(void){
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	00 d0       	rcall	.+0      	; 0x874 <delay_3_ms+0x6>
     874:	00 d0       	rcall	.+0      	; 0x876 <delay_3_ms+0x8>
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
	static uint32_t u32_desired_ticks = 5000;
	for(volatile uint32_t u32_counter = 0; u32_counter < u32_desired_ticks; u32_counter++);
     87a:	19 82       	std	Y+1, r1	; 0x01
     87c:	1a 82       	std	Y+2, r1	; 0x02
     87e:	1b 82       	std	Y+3, r1	; 0x03
     880:	1c 82       	std	Y+4, r1	; 0x04
     882:	0b c0       	rjmp	.+22     	; 0x89a <delay_3_ms+0x2c>
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	9a 81       	ldd	r25, Y+2	; 0x02
     888:	ab 81       	ldd	r26, Y+3	; 0x03
     88a:	bc 81       	ldd	r27, Y+4	; 0x04
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	a1 1d       	adc	r26, r1
     890:	b1 1d       	adc	r27, r1
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	ab 83       	std	Y+3, r26	; 0x03
     898:	bc 83       	std	Y+4, r27	; 0x04
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	ab 81       	ldd	r26, Y+3	; 0x03
     8a0:	bc 81       	ldd	r27, Y+4	; 0x04
     8a2:	88 38       	cpi	r24, 0x88	; 136
     8a4:	93 41       	sbci	r25, 0x13	; 19
     8a6:	a1 05       	cpc	r26, r1
     8a8:	b1 05       	cpc	r27, r1
     8aa:	60 f3       	brcs	.-40     	; 0x884 <delay_3_ms+0x16>
	
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <ENABLE>:
		//do nothing
	}
}

static void ENABLE(lcd_str_config_t* ptr_str_config)
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	ec 01       	movw	r28, r24
	
	DIO_write_pin(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_HIGH_LEVEL);
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	6e 89       	ldd	r22, Y+22	; 0x16
     8c4:	8d 89       	ldd	r24, Y+21	; 0x15
     8c6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	delay_3_ms();
     8ca:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
	DIO_write_pin(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_LOW_LEVEL);
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	6e 89       	ldd	r22, Y+22	; 0x16
     8d2:	8d 89       	ldd	r24, Y+21	; 0x15
     8d4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>


}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <LCD_cmd>:
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @param[in] cmd The command to be sent.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if sending the command failed.
 */
lcd_enu_return_state_t LCD_cmd(lcd_str_config_t *ptr_str_config,uint8_t cmd)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	ec 01       	movw	r28, r24
     8ea:	06 2f       	mov	r16, r22
	lcd_enu_return_state_t u8_bit_counter = LCD_MSB_INDEX;
	DIO_write_pin(ptr_str_config->str_Epin.enu_port,ptr_str_config->str_Epin.enu_pin,DIO_PIN_LOW_LEVEL);
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	6e 89       	ldd	r22, Y+22	; 0x16
     8f0:	8d 89       	ldd	r24, Y+21	; 0x15
     8f2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RSpin.enu_port,ptr_str_config->str_RSpin.enu_pin,DIO_PIN_LOW_LEVEL);
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	6a 89       	ldd	r22, Y+18	; 0x12
     8fa:	89 89       	ldd	r24, Y+17	; 0x11
     8fc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RWpin.enu_port,ptr_str_config->str_RWpin.enu_pin,DIO_PIN_LOW_LEVEL);
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	6c 89       	ldd	r22, Y+20	; 0x14
     904:	8b 89       	ldd	r24, Y+19	; 0x13
     906:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
     90a:	88 81       	ld	r24, Y
     90c:	88 23       	and	r24, r24
     90e:	09 f4       	brne	.+2      	; 0x912 <LCD_cmd+0x34>
     910:	41 c0       	rjmp	.+130    	; 0x994 <LCD_cmd+0xb6>
     912:	9b c0       	rjmp	.+310    	; 0xa4a <LCD_cmd+0x16c>
	{
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4 - U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	01 2e       	mov	r0, r17
     91a:	02 c0       	rjmp	.+4      	; 0x920 <LCD_cmd+0x42>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <LCD_cmd+0x3e>
     924:	20 2f       	mov	r18, r16
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	82 23       	and	r24, r18
     92a:	93 23       	and	r25, r19
     92c:	01 2e       	mov	r0, r17
     92e:	02 c0       	rjmp	.+4      	; 0x934 <LCD_cmd+0x56>
     930:	95 95       	asr	r25
     932:	87 95       	ror	r24
     934:	0a 94       	dec	r0
     936:	e2 f7       	brpl	.-8      	; 0x930 <LCD_cmd+0x52>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	a9 f4       	brne	.+42     	; 0x966 <LCD_cmd+0x88>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     93c:	8f 2d       	mov	r24, r15
     93e:	0f 2c       	mov	r0, r15
     940:	00 0c       	add	r0, r0
     942:	99 0b       	sbc	r25, r25
     944:	dc 01       	movw	r26, r24
     946:	11 96       	adiw	r26, 0x01	; 1
     948:	aa 0f       	add	r26, r26
     94a:	bb 1f       	adc	r27, r27
     94c:	ac 0f       	add	r26, r28
     94e:	bd 1f       	adc	r27, r29
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	fe 01       	movw	r30, r28
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	6c 91       	ld	r22, X
     95e:	81 81       	ldd	r24, Z+1	; 0x01
     960:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
     964:	14 c0       	rjmp	.+40     	; 0x98e <LCD_cmd+0xb0>
			}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     966:	8f 2d       	mov	r24, r15
     968:	0f 2c       	mov	r0, r15
     96a:	00 0c       	add	r0, r0
     96c:	99 0b       	sbc	r25, r25
     96e:	dc 01       	movw	r26, r24
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	aa 0f       	add	r26, r26
     974:	bb 1f       	adc	r27, r27
     976:	ac 0f       	add	r26, r28
     978:	bd 1f       	adc	r27, r29
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	fe 01       	movw	r30, r28
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	6c 91       	ld	r22, X
     988:	81 81       	ldd	r24, Z+1	; 0x01
     98a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
			}
			u8_bit_counter--;
     98e:	11 50       	subi	r17, 0x01	; 1
	DIO_write_pin(ptr_str_config->str_Epin.enu_port,ptr_str_config->str_Epin.enu_pin,DIO_PIN_LOW_LEVEL);
	DIO_write_pin(ptr_str_config->str_RSpin.enu_port,ptr_str_config->str_RSpin.enu_pin,DIO_PIN_LOW_LEVEL);
	DIO_write_pin(ptr_str_config->str_RWpin.enu_port,ptr_str_config->str_RWpin.enu_pin,DIO_PIN_LOW_LEVEL);
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
	{
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4 - U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     990:	fa 94       	dec	r15
     992:	05 c0       	rjmp	.+10     	; 0x99e <LCD_cmd+0xc0>
     994:	0f 2e       	mov	r0, r31
     996:	f3 e0       	ldi	r31, 0x03	; 3
     998:	ff 2e       	mov	r15, r31
     99a:	f0 2d       	mov	r31, r0
     99c:	17 e0       	ldi	r17, 0x07	; 7
     99e:	ff 20       	and	r15, r15
     9a0:	0c f0       	brlt	.+2      	; 0x9a4 <LCD_cmd+0xc6>
     9a2:	b8 cf       	rjmp	.-144    	; 0x914 <LCD_cmd+0x36>
			}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     9a4:	ce 01       	movw	r24, r28
     9a6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <ENABLE>
		delay_3_ms();
     9aa:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
	   for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     9ae:	0f 2e       	mov	r0, r31
     9b0:	f3 e0       	ldi	r31, 0x03	; 3
     9b2:	ff 2e       	mov	r15, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	3f c0       	rjmp	.+126    	; 0xa36 <LCD_cmd+0x158>
		   if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	01 2e       	mov	r0, r17
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <LCD_cmd+0xe6>
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	0a 94       	dec	r0
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <LCD_cmd+0xe2>
     9c8:	20 2f       	mov	r18, r16
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	82 23       	and	r24, r18
     9ce:	93 23       	and	r25, r19
     9d0:	01 2e       	mov	r0, r17
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <LCD_cmd+0xfa>
     9d4:	95 95       	asr	r25
     9d6:	87 95       	ror	r24
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <LCD_cmd+0xf6>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	a9 f4       	brne	.+42     	; 0xa0a <LCD_cmd+0x12c>
			   DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     9e0:	8f 2d       	mov	r24, r15
     9e2:	0f 2c       	mov	r0, r15
     9e4:	00 0c       	add	r0, r0
     9e6:	99 0b       	sbc	r25, r25
     9e8:	dc 01       	movw	r26, r24
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	aa 0f       	add	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	ac 0f       	add	r26, r28
     9f2:	bd 1f       	adc	r27, r29
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	fe 01       	movw	r30, r28
     9fa:	e8 0f       	add	r30, r24
     9fc:	f9 1f       	adc	r31, r25
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	6c 91       	ld	r22, X
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
     a08:	14 c0       	rjmp	.+40     	; 0xa32 <LCD_cmd+0x154>
			}else{
			   DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     a0a:	8f 2d       	mov	r24, r15
     a0c:	0f 2c       	mov	r0, r15
     a0e:	00 0c       	add	r0, r0
     a10:	99 0b       	sbc	r25, r25
     a12:	dc 01       	movw	r26, r24
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	aa 0f       	add	r26, r26
     a18:	bb 1f       	adc	r27, r27
     a1a:	ac 0f       	add	r26, r28
     a1c:	bd 1f       	adc	r27, r29
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	fe 01       	movw	r30, r28
     a24:	e8 0f       	add	r30, r24
     a26:	f9 1f       	adc	r31, r25
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	6c 91       	ld	r22, X
     a2c:	81 81       	ldd	r24, Z+1	; 0x01
     a2e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
		   }
		   u8_bit_counter--;
     a32:	11 50       	subi	r17, 0x01	; 1
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
		delay_3_ms();
	   for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     a34:	fa 94       	dec	r15
     a36:	ff 20       	and	r15, r15
     a38:	0c f0       	brlt	.+2      	; 0xa3c <LCD_cmd+0x15e>
     a3a:	be cf       	rjmp	.-132    	; 0x9b8 <LCD_cmd+0xda>
			}else{
			   DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
		   }
		   u8_bit_counter--;
	   }
		ENABLE(ptr_str_config);
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <ENABLE>
		delay_3_ms();
     a42:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @param[in] cmd The command to be sent.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if sending the command failed.
 */
lcd_enu_return_state_t LCD_cmd(lcd_str_config_t *ptr_str_config,uint8_t cmd)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     a46:	c0 e0       	ldi	r28, 0x00	; 0
     a48:	4e c0       	rjmp	.+156    	; 0xae6 <LCD_cmd+0x208>
		   u8_bit_counter--;
	   }
		ENABLE(ptr_str_config);
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	f1 f1       	breq	.+124    	; 0xaca <LCD_cmd+0x1ec>
		delay_3_ms();	
	}
	else
	{
		//do nothing
		enu_return_state=LCD_E_NOT_OK;
     a4e:	c1 e0       	ldi	r28, 0x01	; 1
     a50:	4a c0       	rjmp	.+148    	; 0xae6 <LCD_cmd+0x208>
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0f 2c       	mov	r0, r15
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <LCD_cmd+0x180>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <LCD_cmd+0x17c>
     a62:	20 2f       	mov	r18, r16
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	82 23       	and	r24, r18
     a68:	93 23       	and	r25, r19
     a6a:	0f 2c       	mov	r0, r15
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <LCD_cmd+0x194>
     a6e:	95 95       	asr	r25
     a70:	87 95       	ror	r24
     a72:	0a 94       	dec	r0
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <LCD_cmd+0x190>
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	99 f4       	brne	.+38     	; 0xaa0 <LCD_cmd+0x1c2>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     a7a:	81 2f       	mov	r24, r17
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	dc 01       	movw	r26, r24
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	aa 0f       	add	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	ac 0f       	add	r26, r28
     a88:	bd 1f       	adc	r27, r29
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	fe 01       	movw	r30, r28
     a90:	e8 0f       	add	r30, r24
     a92:	f9 1f       	adc	r31, r25
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	6c 91       	ld	r22, X
     a98:	81 81       	ldd	r24, Z+1	; 0x01
     a9a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
     a9e:	12 c0       	rjmp	.+36     	; 0xac4 <LCD_cmd+0x1e6>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     aa0:	81 2f       	mov	r24, r17
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	dc 01       	movw	r26, r24
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	aa 0f       	add	r26, r26
     aaa:	bb 1f       	adc	r27, r27
     aac:	ac 0f       	add	r26, r28
     aae:	bd 1f       	adc	r27, r29
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fe 01       	movw	r30, r28
     ab6:	e8 0f       	add	r30, r24
     ab8:	f9 1f       	adc	r31, r25
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	6c 91       	ld	r22, X
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
			}
			u8_bit_counter--;
     ac4:	fa 94       	dec	r15
		ENABLE(ptr_str_config);
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
     ac6:	1f 5f       	subi	r17, 0xFF	; 255
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <LCD_cmd+0x1f6>
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	0f 2e       	mov	r0, r31
     ace:	f7 e0       	ldi	r31, 0x07	; 7
     ad0:	ff 2e       	mov	r15, r31
     ad2:	f0 2d       	mov	r31, r0
     ad4:	18 30       	cpi	r17, 0x08	; 8
     ad6:	08 f4       	brcc	.+2      	; 0xada <LCD_cmd+0x1fc>
     ad8:	bc cf       	rjmp	.-136    	; 0xa52 <LCD_cmd+0x174>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     ada:	ce 01       	movw	r24, r28
     adc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <ENABLE>
		delay_3_ms();	
     ae0:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @param[in] cmd The command to be sent.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if sending the command failed.
 */
lcd_enu_return_state_t LCD_cmd(lcd_str_config_t *ptr_str_config,uint8_t cmd)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		//do nothing
		enu_return_state=LCD_E_NOT_OK;
	}
	delay_3_ms();
     ae6:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
	return enu_return_state;
}
     aea:	8c 2f       	mov	r24, r28
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	08 95       	ret

00000af8 <LCD_init>:
 *
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if initialization failed.
 */
lcd_enu_return_state_t LCD_init(lcd_str_config_t* ptr_str_config)
{
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	ec 01       	movw	r28, r24
	lcd_enu_return_state_t enu_return_state = LCD_E_OK;
	
	enu_return_state |=DIO_init(ptr_str_config->str_RSpin.enu_port, ptr_str_config->str_RSpin.enu_pin, DIO_PIN_OUTPUT);
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	6a 89       	ldd	r22, Y+18	; 0x12
     b06:	89 89       	ldd	r24, Y+17	; 0x11
     b08:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
     b0c:	18 2f       	mov	r17, r24
	enu_return_state |=DIO_init(ptr_str_config->str_RWpin.enu_port, ptr_str_config->str_RWpin.enu_pin, DIO_PIN_OUTPUT);
     b0e:	41 e0       	ldi	r20, 0x01	; 1
     b10:	6c 89       	ldd	r22, Y+20	; 0x14
     b12:	8b 89       	ldd	r24, Y+19	; 0x13
     b14:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
     b18:	18 2b       	or	r17, r24
	enu_return_state |=DIO_init(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_OUTPUT);
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	6e 89       	ldd	r22, Y+22	; 0x16
     b1e:	8d 89       	ldd	r24, Y+21	; 0x15
     b20:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
     b24:	18 2b       	or	r17, r24
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
     b26:	88 81       	ld	r24, Y
     b28:	88 23       	and	r24, r24
     b2a:	b1 f0       	breq	.+44     	; 0xb58 <LCD_init+0x60>
     b2c:	2d c0       	rjmp	.+90     	; 0xb88 <LCD_init+0x90>
	{
		
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_4; u8_counter++){
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
     b2e:	20 2f       	mov	r18, r16
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	d9 01       	movw	r26, r18
     b34:	11 96       	adiw	r26, 0x01	; 1
     b36:	aa 0f       	add	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	ac 0f       	add	r26, r28
     b3c:	bd 1f       	adc	r27, r29
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	fe 01       	movw	r30, r28
     b44:	e2 0f       	add	r30, r18
     b46:	f3 1f       	adc	r31, r19
     b48:	41 e0       	ldi	r20, 0x01	; 1
     b4a:	6c 91       	ld	r22, X
     b4c:	81 81       	ldd	r24, Z+1	; 0x01
     b4e:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
     b52:	18 2b       	or	r17, r24
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
	{
		
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_4; u8_counter++){
     b54:	0f 5f       	subi	r16, 0xFF	; 255
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <LCD_init+0x62>
     b58:	00 e0       	ldi	r16, 0x00	; 0
     b5a:	04 30       	cpi	r16, 0x04	; 4
     b5c:	40 f3       	brcs	.-48     	; 0xb2e <LCD_init+0x36>
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
		}
		LCD_cmd(ptr_str_config, LCD_CMD_CURSOR_HOME);
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	ce 01       	movw	r24, r28
     b62:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_4BITS_2LINES_58DM);
     b66:	68 e2       	ldi	r22, 0x28	; 40
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
     b6e:	6c e0       	ldi	r22, 0x0C	; 12
     b70:	ce 01       	movw	r24, r28
     b72:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
     b76:	66 e0       	ldi	r22, 0x06	; 6
     b78:	ce 01       	movw	r24, r28
     b7a:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);						
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
     b86:	2c c0       	rjmp	.+88     	; 0xbe0 <LCD_init+0xe8>
								
	}else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE){
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	b9 f0       	breq	.+46     	; 0xbba <LCD_init+0xc2>
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);
							
	}else{
		enu_return_state=LCD_E_NOT_OK;						
     b8c:	11 e0       	ldi	r17, 0x01	; 1
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <LCD_init+0xe8>
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);						
								
	}else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE){
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
     b90:	80 2f       	mov	r24, r16
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	dc 01       	movw	r26, r24
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	aa 0f       	add	r26, r26
     b9a:	bb 1f       	adc	r27, r27
     b9c:	ac 0f       	add	r26, r28
     b9e:	bd 1f       	adc	r27, r29
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	fe 01       	movw	r30, r28
     ba6:	e8 0f       	add	r30, r24
     ba8:	f9 1f       	adc	r31, r25
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	6c 91       	ld	r22, X
     bae:	81 81       	ldd	r24, Z+1	; 0x01
     bb0:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
     bb4:	18 2b       	or	r17, r24
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);						
								
	}else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE){
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
     bb6:	0f 5f       	subi	r16, 0xFF	; 255
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <LCD_init+0xc4>
     bba:	00 e0       	ldi	r16, 0x00	; 0
     bbc:	08 30       	cpi	r16, 0x08	; 8
     bbe:	40 f3       	brcs	.-48     	; 0xb90 <LCD_init+0x98>
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
		}
		LCD_cmd(ptr_str_config, LCD_8BITS_2LINES_58DM);
     bc0:	68 e3       	ldi	r22, 0x38	; 56
     bc2:	ce 01       	movw	r24, r28
     bc4:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
     bc8:	6c e0       	ldi	r22, 0x0C	; 12
     bca:	ce 01       	movw	r24, r28
     bcc:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
     bd0:	66 e0       	ldi	r22, 0x06	; 6
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
							
	}else{
		enu_return_state=LCD_E_NOT_OK;						
	}
	return enu_return_state;
}
     be0:	81 2f       	mov	r24, r17
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <LCD_clear>:
 *
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if clearing failed.
 */
	lcd_enu_return_state_t LCD_clear (lcd_str_config_t* ptr_str_config)
	{
     bec:	cf 93       	push	r28

		lcd_enu_return_state_t enu_return_state=LCD_E_OK;
		enu_return_state |= LCD_cmd(ptr_str_config,LCD_CMD_CLEAR);
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
     bf4:	c8 2f       	mov	r28, r24
		delay_3_ms();
     bf6:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
		return enu_return_state;

	}
     bfa:	8c 2f       	mov	r24, r28
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <LCD_setCursor>:
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if setting the cursor failed.
 */
lcd_enu_return_state_t LCD_setCursor (lcd_str_config_t* ptr_str_config, lcd_enu_row_select_t copy_enu_row, lcd_enu_col_select_t copy_enu_col)
{
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
	if(copy_enu_row == LCD_ROW_1)
     c00:	61 11       	cpse	r22, r1
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <LCD_setCursor+0x10>
	{
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_1 + copy_enu_col);
     c04:	60 e8       	ldi	r22, 0x80	; 128
     c06:	64 0f       	add	r22, r20
     c08:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
 * @param[in] copy_enu_col Selected column for the cursor.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if setting the cursor failed.
 */
lcd_enu_return_state_t LCD_setCursor (lcd_str_config_t* ptr_str_config, lcd_enu_row_select_t copy_enu_row, lcd_enu_col_select_t copy_enu_col)
{
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret
	if(copy_enu_row == LCD_ROW_1)
	{
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_1 + copy_enu_col);
		
	}else if(copy_enu_row == LCD_ROW_2){
     c10:	61 30       	cpi	r22, 0x01	; 1
     c12:	31 f4       	brne	.+12     	; 0xc20 <LCD_setCursor+0x20>
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_2 + copy_enu_col);	
     c14:	60 ec       	ldi	r22, 0xC0	; 192
     c16:	64 0f       	add	r22, r20
     c18:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
 * @param[in] copy_enu_col Selected column for the cursor.
 * @return Operation status: LCD_E_OK if successful, LCD_E_NOT_OK if setting the cursor failed.
 */
lcd_enu_return_state_t LCD_setCursor (lcd_str_config_t* ptr_str_config, lcd_enu_row_select_t copy_enu_row, lcd_enu_col_select_t copy_enu_col)
{
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	08 95       	ret
	}else if(copy_enu_row == LCD_ROW_2){
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_2 + copy_enu_col);	

	}else{
		
		enu_return_state=LCD_E_NOT_OK;
     c20:	81 e0       	ldi	r24, 0x01	; 1
	}

	return enu_return_state;

}
     c22:	08 95       	ret

00000c24 <LCD_char>:
 *
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @param[in] cmd The character to be written.
 */
void LCD_char(lcd_str_config_t *ptr_str_config, uint8_t cmd)
{
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ec 01       	movw	r28, r24
     c30:	06 2f       	mov	r16, r22
	lcd_enu_return_state_t u8_bit_counter = LCD_MSB_INDEX;
	DIO_write_pin(ptr_str_config->str_Epin.enu_port,ptr_str_config->str_Epin.enu_pin,DIO_PIN_LOW_LEVEL);
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	6e 89       	ldd	r22, Y+22	; 0x16
     c36:	8d 89       	ldd	r24, Y+21	; 0x15
     c38:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RSpin.enu_port,ptr_str_config->str_RSpin.enu_pin,DIO_PIN_HIGH_LEVEL);
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	6a 89       	ldd	r22, Y+18	; 0x12
     c40:	89 89       	ldd	r24, Y+17	; 0x11
     c42:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RWpin.enu_port,ptr_str_config->str_RWpin.enu_pin,DIO_PIN_LOW_LEVEL);
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	6c 89       	ldd	r22, Y+20	; 0x14
     c4a:	8b 89       	ldd	r24, Y+19	; 0x13
     c4c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
	
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
     c50:	88 81       	ld	r24, Y
     c52:	88 23       	and	r24, r24
     c54:	09 f4       	brne	.+2      	; 0xc58 <LCD_char+0x34>
     c56:	41 c0       	rjmp	.+130    	; 0xcda <LCD_char+0xb6>
     c58:	9a c0       	rjmp	.+308    	; 0xd8e <LCD_char+0x16a>
	{
		
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	01 2e       	mov	r0, r17
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <LCD_char+0x42>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <LCD_char+0x3e>
     c6a:	20 2f       	mov	r18, r16
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	82 23       	and	r24, r18
     c70:	93 23       	and	r25, r19
     c72:	01 2e       	mov	r0, r17
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <LCD_char+0x56>
     c76:	95 95       	asr	r25
     c78:	87 95       	ror	r24
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <LCD_char+0x52>
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	a9 f4       	brne	.+42     	; 0xcac <LCD_char+0x88>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     c82:	8f 2d       	mov	r24, r15
     c84:	0f 2c       	mov	r0, r15
     c86:	00 0c       	add	r0, r0
     c88:	99 0b       	sbc	r25, r25
     c8a:	dc 01       	movw	r26, r24
     c8c:	11 96       	adiw	r26, 0x01	; 1
     c8e:	aa 0f       	add	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	ac 0f       	add	r26, r28
     c94:	bd 1f       	adc	r27, r29
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	fe 01       	movw	r30, r28
     c9c:	e8 0f       	add	r30, r24
     c9e:	f9 1f       	adc	r31, r25
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	6c 91       	ld	r22, X
     ca4:	81 81       	ldd	r24, Z+1	; 0x01
     ca6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
     caa:	14 c0       	rjmp	.+40     	; 0xcd4 <LCD_char+0xb0>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     cac:	8f 2d       	mov	r24, r15
     cae:	0f 2c       	mov	r0, r15
     cb0:	00 0c       	add	r0, r0
     cb2:	99 0b       	sbc	r25, r25
     cb4:	dc 01       	movw	r26, r24
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	aa 0f       	add	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	ac 0f       	add	r26, r28
     cbe:	bd 1f       	adc	r27, r29
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	fe 01       	movw	r30, r28
     cc6:	e8 0f       	add	r30, r24
     cc8:	f9 1f       	adc	r31, r25
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	6c 91       	ld	r22, X
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
			}
			u8_bit_counter--;
     cd4:	11 50       	subi	r17, 0x01	; 1
	
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
	{
		
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     cd6:	fa 94       	dec	r15
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <LCD_char+0xc0>
     cda:	0f 2e       	mov	r0, r31
     cdc:	f3 e0       	ldi	r31, 0x03	; 3
     cde:	ff 2e       	mov	r15, r31
     ce0:	f0 2d       	mov	r31, r0
     ce2:	17 e0       	ldi	r17, 0x07	; 7
     ce4:	ff 20       	and	r15, r15
     ce6:	0c f0       	brlt	.+2      	; 0xcea <LCD_char+0xc6>
     ce8:	b8 cf       	rjmp	.-144    	; 0xc5a <LCD_char+0x36>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     cea:	ce 01       	movw	r24, r28
     cec:	0e 94 5d 04 	call	0x8ba	; 0x8ba <ENABLE>
		delay_3_ms();
     cf0:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     cf4:	0f 2e       	mov	r0, r31
     cf6:	f3 e0       	ldi	r31, 0x03	; 3
     cf8:	ff 2e       	mov	r15, r31
     cfa:	f0 2d       	mov	r31, r0
     cfc:	3f c0       	rjmp	.+126    	; 0xd7c <LCD_char+0x158>
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	01 2e       	mov	r0, r17
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <LCD_char+0xe6>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <LCD_char+0xe2>
     d0e:	20 2f       	mov	r18, r16
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	82 23       	and	r24, r18
     d14:	93 23       	and	r25, r19
     d16:	01 2e       	mov	r0, r17
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <LCD_char+0xfa>
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <LCD_char+0xf6>
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	a9 f4       	brne	.+42     	; 0xd50 <LCD_char+0x12c>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     d26:	8f 2d       	mov	r24, r15
     d28:	0f 2c       	mov	r0, r15
     d2a:	00 0c       	add	r0, r0
     d2c:	99 0b       	sbc	r25, r25
     d2e:	dc 01       	movw	r26, r24
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	aa 0f       	add	r26, r26
     d34:	bb 1f       	adc	r27, r27
     d36:	ac 0f       	add	r26, r28
     d38:	bd 1f       	adc	r27, r29
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	fe 01       	movw	r30, r28
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	6c 91       	ld	r22, X
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <LCD_char+0x154>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     d50:	8f 2d       	mov	r24, r15
     d52:	0f 2c       	mov	r0, r15
     d54:	00 0c       	add	r0, r0
     d56:	99 0b       	sbc	r25, r25
     d58:	dc 01       	movw	r26, r24
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	aa 0f       	add	r26, r26
     d5e:	bb 1f       	adc	r27, r27
     d60:	ac 0f       	add	r26, r28
     d62:	bd 1f       	adc	r27, r29
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	fe 01       	movw	r30, r28
     d6a:	e8 0f       	add	r30, r24
     d6c:	f9 1f       	adc	r31, r25
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	6c 91       	ld	r22, X
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
			}
			u8_bit_counter--;
     d78:	11 50       	subi	r17, 0x01	; 1
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
		delay_3_ms();
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     d7a:	fa 94       	dec	r15
     d7c:	ff 20       	and	r15, r15
     d7e:	0c f0       	brlt	.+2      	; 0xd82 <LCD_char+0x15e>
     d80:	be cf       	rjmp	.-132    	; 0xcfe <LCD_char+0xda>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     d82:	ce 01       	movw	r24, r28
     d84:	0e 94 5d 04 	call	0x8ba	; 0x8ba <ENABLE>
		delay_3_ms();
     d88:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
     d8c:	4d c0       	rjmp	.+154    	; 0xe28 <LCD_char+0x204>
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	09 f0       	breq	.+2      	; 0xd94 <LCD_char+0x170>
     d92:	4a c0       	rjmp	.+148    	; 0xe28 <LCD_char+0x204>
     d94:	3c c0       	rjmp	.+120    	; 0xe0e <LCD_char+0x1ea>
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0f 2c       	mov	r0, r15
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <LCD_char+0x17e>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <LCD_char+0x17a>
     da6:	20 2f       	mov	r18, r16
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	82 23       	and	r24, r18
     dac:	93 23       	and	r25, r19
     dae:	0f 2c       	mov	r0, r15
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <LCD_char+0x192>
     db2:	95 95       	asr	r25
     db4:	87 95       	ror	r24
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <LCD_char+0x18e>
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	99 f4       	brne	.+38     	; 0xde4 <LCD_char+0x1c0>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     dbe:	81 2f       	mov	r24, r17
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	dc 01       	movw	r26, r24
     dc4:	11 96       	adiw	r26, 0x01	; 1
     dc6:	aa 0f       	add	r26, r26
     dc8:	bb 1f       	adc	r27, r27
     dca:	ac 0f       	add	r26, r28
     dcc:	bd 1f       	adc	r27, r29
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	fe 01       	movw	r30, r28
     dd4:	e8 0f       	add	r30, r24
     dd6:	f9 1f       	adc	r31, r25
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	6c 91       	ld	r22, X
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <LCD_char+0x1e4>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     de4:	81 2f       	mov	r24, r17
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	dc 01       	movw	r26, r24
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	aa 0f       	add	r26, r26
     dee:	bb 1f       	adc	r27, r27
     df0:	ac 0f       	add	r26, r28
     df2:	bd 1f       	adc	r27, r29
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	fe 01       	movw	r30, r28
     dfa:	e8 0f       	add	r30, r24
     dfc:	f9 1f       	adc	r31, r25
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	6c 91       	ld	r22, X
     e02:	81 81       	ldd	r24, Z+1	; 0x01
     e04:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_write_pin>
			}
			u8_bit_counter--;
     e08:	fa 94       	dec	r15
		ENABLE(ptr_str_config);
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
     e0a:	1f 5f       	subi	r17, 0xFF	; 255
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <LCD_char+0x1f4>
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	0f 2e       	mov	r0, r31
     e12:	f7 e0       	ldi	r31, 0x07	; 7
     e14:	ff 2e       	mov	r15, r31
     e16:	f0 2d       	mov	r31, r0
     e18:	18 30       	cpi	r17, 0x08	; 8
     e1a:	08 f4       	brcc	.+2      	; 0xe1e <LCD_char+0x1fa>
     e1c:	bc cf       	rjmp	.-136    	; 0xd96 <LCD_char+0x172>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 5d 04 	call	0x8ba	; 0x8ba <ENABLE>
		delay_3_ms();
     e24:	0e 94 37 04 	call	0x86e	; 0x86e <delay_3_ms>
	}
	else
	{
		//do nothing
	}
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	08 95       	ret

00000e34 <LCD_writeString>:
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @param[in] ptr_u8_data Pointer to the string data to be written.
 * @return Operation status: LCD_E_OK if successful, LCD_NULL_PTR if NULL pointer provided.
 */
lcd_enu_return_state_t LCD_writeString (lcd_str_config_t *ptr_str_config, uint8_t *ptr_u8_data)
{
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
	uint8_t u8_char_counter = 0;
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
	if(ptr_u8_data == NULL)
     e3e:	61 15       	cp	r22, r1
     e40:	71 05       	cpc	r23, r1
     e42:	81 f0       	breq	.+32     	; 0xe64 <LCD_writeString+0x30>
     e44:	8b 01       	movw	r16, r22
     e46:	7c 01       	movw	r14, r24
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <LCD_writeString+0x20>

	else
	{
		while(ptr_u8_data[u8_char_counter] !='\0')
		{
			LCD_char(ptr_str_config,ptr_u8_data[u8_char_counter]);
     e4c:	c7 01       	movw	r24, r14
     e4e:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_char>
			u8_char_counter++;
     e52:	cf 5f       	subi	r28, 0xFF	; 255
		enu_return_state = LCD_NULL_PTR;
	}

	else
	{
		while(ptr_u8_data[u8_char_counter] !='\0')
     e54:	f8 01       	movw	r30, r16
     e56:	ec 0f       	add	r30, r28
     e58:	f1 1d       	adc	r31, r1
     e5a:	60 81       	ld	r22, Z
     e5c:	61 11       	cpse	r22, r1
     e5e:	f6 cf       	rjmp	.-20     	; 0xe4c <LCD_writeString+0x18>
 * @return Operation status: LCD_E_OK if successful, LCD_NULL_PTR if NULL pointer provided.
 */
lcd_enu_return_state_t LCD_writeString (lcd_str_config_t *ptr_str_config, uint8_t *ptr_u8_data)
{
	uint8_t u8_char_counter = 0;
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <LCD_writeString+0x32>
	if(ptr_u8_data == NULL)
	{
		enu_return_state = LCD_NULL_PTR;
     e64:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return enu_return_state;
	

}
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <LCD_writeSpChar>:
 * @param[in] ptr_str_config Pointer to the LCD configuration structure.
 * @param[in] u8_SpChar The type of special character to be written.
 * @return Operation status: LCD_E_OK if successful.
 */
lcd_enu_return_state_t LCD_writeSpChar (lcd_str_config_t *ptr_str_config, u8_en_lcdSpCharType u8_SpChar)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	28 97       	sbiw	r28, 0x08	; 8
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	7c 01       	movw	r14, r24
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	e5 e6       	ldi	r30, 0x65	; 101
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	de 01       	movw	r26, r28
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	01 90       	ld	r0, Z+
     e9a:	0d 92       	st	X+, r0
     e9c:	8a 95       	dec	r24
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <LCD_writeSpChar+0x26>
	uint8_t i;
	LCD_cmd(ptr_str_config,LCD_CGRAM_START_ADD+( u8_SpChar* LCD_1_BYTE));
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	68 5f       	subi	r22, 0xF8	; 248
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	66 0f       	add	r22, r22
     ea8:	66 0f       	add	r22, r22
     eaa:	66 0f       	add	r22, r22
     eac:	c7 01       	movw	r24, r14
     eae:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
	for(i=U8_ZERO_VALUE;i<LCD_1_BYTE;i++)
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	0b c0       	rjmp	.+22     	; 0xecc <LCD_writeSpChar+0x5a>
	{
		LCD_char(ptr_str_config,sp_char[i]);
     eb6:	e1 e0       	ldi	r30, 0x01	; 1
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ec 0f       	add	r30, r28
     ebc:	fd 1f       	adc	r31, r29
     ebe:	e1 0f       	add	r30, r17
     ec0:	f1 1d       	adc	r31, r1
     ec2:	60 81       	ld	r22, Z
     ec4:	c7 01       	movw	r24, r14
     ec6:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_char>
lcd_enu_return_state_t LCD_writeSpChar (lcd_str_config_t *ptr_str_config, u8_en_lcdSpCharType u8_SpChar)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
	uint8_t i;
	LCD_cmd(ptr_str_config,LCD_CGRAM_START_ADD+( u8_SpChar* LCD_1_BYTE));
	for(i=U8_ZERO_VALUE;i<LCD_1_BYTE;i++)
     eca:	1f 5f       	subi	r17, 0xFF	; 255
     ecc:	18 30       	cpi	r17, 0x08	; 8
     ece:	98 f3       	brcs	.-26     	; 0xeb6 <LCD_writeSpChar+0x44>
	{
		LCD_char(ptr_str_config,sp_char[i]);
	}	
	
	LCD_cmd(ptr_str_config,LCD_DDRAM_START_ADD_LINE_2);
     ed0:	60 ec       	ldi	r22, 0xC0	; 192
     ed2:	c7 01       	movw	r24, r14
     ed4:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_cmd>
	LCD_char(ptr_str_config,LCD_BELL);
     ed8:	63 e0       	ldi	r22, 0x03	; 3
     eda:	c7 01       	movw	r24, r14
     edc:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_char>
	return enu_return_state;
}
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	28 96       	adiw	r28, 0x08	; 8
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <LM35_init>:
static void LM35_adc_to_temp(void *data){
	
	*((double*)data) = *((double*)data)/LM35_VOLT_PER_DEGREE;
}

lm35_enu_return_state_t LM35_init(lm35_str_channel_t *lm35_obj, lm35_str_config_t *lm35_config){
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
	lm35_enu_return_state_t enu_return_state = LM35_OK;
	if(lm35_obj == NULL){
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	49 f0       	breq	.+18     	; 0xf14 <LM35_init+0x1a>
     f02:	ec 01       	movw	r28, r24
		enu_return_state =LM35_NOK;
	}
	else{
		ADC_init(&(lm35_config->str_lm35_adc_config));
     f04:	cb 01       	movw	r24, r22
     f06:	0e 94 42 08 	call	0x1084	; 0x1084 <ADC_init>
		ADC_channel_init(&(lm35_obj->str_lm35_channel));	
     f0a:	ce 01       	movw	r24, r28
     f0c:	0e 94 81 08 	call	0x1102	; 0x1102 <ADC_channel_init>
	
	*((double*)data) = *((double*)data)/LM35_VOLT_PER_DEGREE;
}

lm35_enu_return_state_t LM35_init(lm35_str_channel_t *lm35_obj, lm35_str_config_t *lm35_config){
	lm35_enu_return_state_t enu_return_state = LM35_OK;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <LM35_init+0x1c>
	if(lm35_obj == NULL){
		enu_return_state =LM35_NOK;
     f14:	81 e0       	ldi	r24, 0x01	; 1
	else{
		ADC_init(&(lm35_config->str_lm35_adc_config));
		ADC_channel_init(&(lm35_obj->str_lm35_channel));	
	}
	return enu_return_state;
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <LM35_read_temp>:

lm35_enu_return_state_t LM35_read_temp(lm35_str_channel_t *lm35_obj,lm35_str_config_t *lm35_config, double *temp){
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <LM35_read_temp+0xa>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <LM35_read_temp+0xc>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	lm35_enu_return_state_t enu_return_state = LM35_OK;
	double data = 0;
     f2c:	19 82       	std	Y+1, r1	; 0x01
     f2e:	1a 82       	std	Y+2, r1	; 0x02
     f30:	1b 82       	std	Y+3, r1	; 0x03
     f32:	1c 82       	std	Y+4, r1	; 0x04
	if((lm35_obj == NULL) || (lm35_config == NULL)){
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	e9 f0       	breq	.+58     	; 0xf72 <LM35_read_temp+0x56>
     f38:	61 15       	cp	r22, r1
     f3a:	71 05       	cpc	r23, r1
     f3c:	e1 f0       	breq	.+56     	; 0xf76 <LM35_read_temp+0x5a>
     f3e:	8a 01       	movw	r16, r20
     f40:	9b 01       	movw	r18, r22
     f42:	bc 01       	movw	r22, r24
		enu_return_state =LM35_NOK;
	}
	else{
		
		ADC_channel_read(&(lm35_config->str_lm35_adc_config), &(lm35_obj->str_lm35_channel), &data);
     f44:	ae 01       	movw	r20, r28
     f46:	4f 5f       	subi	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	c9 01       	movw	r24, r18
     f4c:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_channel_read>
		*temp = data/LM35_VOLT_PER_DEGREE;
     f50:	2a e0       	ldi	r18, 0x0A	; 10
     f52:	37 ed       	ldi	r19, 0xD7	; 215
     f54:	43 e2       	ldi	r20, 0x23	; 35
     f56:	5c e3       	ldi	r21, 0x3C	; 60
     f58:	69 81       	ldd	r22, Y+1	; 0x01
     f5a:	7a 81       	ldd	r23, Y+2	; 0x02
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__divsf3>
     f64:	f8 01       	movw	r30, r16
     f66:	60 83       	st	Z, r22
     f68:	71 83       	std	Z+1, r23	; 0x01
     f6a:	82 83       	std	Z+2, r24	; 0x02
     f6c:	93 83       	std	Z+3, r25	; 0x03
	}
	return enu_return_state;
}

lm35_enu_return_state_t LM35_read_temp(lm35_str_channel_t *lm35_obj,lm35_str_config_t *lm35_config, double *temp){
	lm35_enu_return_state_t enu_return_state = LM35_OK;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <LM35_read_temp+0x5c>
	double data = 0;
	if((lm35_obj == NULL) || (lm35_config == NULL)){
		enu_return_state =LM35_NOK;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <LM35_read_temp+0x5c>
     f76:	81 e0       	ldi	r24, 0x01	; 1
		ADC_channel_read(&(lm35_config->str_lm35_adc_config), &(lm35_obj->str_lm35_channel), &data);
		*temp = data/LM35_VOLT_PER_DEGREE;
	}
	return enu_return_state;
	
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	08 95       	ret

00000f8a <TIMER_MANGER_init>:
static timer_str_config_t g_str_Timer; /**< Global instance of the timer configuration structure. */



timerm_enu_return_state_t TIMER_MANGER_init(const timerm_str_config_t *stPtr_a_TimerConfig)
{
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if( (stPtr_a_TimerConfig->enu_timer_no >= INVALID_TIMER_TYPE) )
     f90:	fc 01       	movw	r30, r24
     f92:	20 81       	ld	r18, Z
     f94:	23 30       	cpi	r18, 0x03	; 3
     f96:	c8 f4       	brcc	.+50     	; 0xfca <TIMER_MANGER_init+0x40>
     f98:	ec 01       	movw	r28, r24
	}
	else
	{
		/*initiate the timer */
		
		g_str_Timer.enu_timer_no				=		stPtr_a_TimerConfig->enu_timer_no;
     f9a:	e2 e1       	ldi	r30, 0x12	; 18
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	20 83       	st	Z, r18
		g_str_Timer.enu_timer_mode				=		stPtr_a_TimerConfig->enu_timer_mode;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	82 83       	std	Z+2, r24	; 0x02
		g_str_Timer.u16_timer_InitialValue	    =		stPtr_a_TimerConfig->u16_timer_initial_value;
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	9b 81       	ldd	r25, Y+3	; 0x03
     fa8:	97 83       	std	Z+7, r25	; 0x07
     faa:	86 83       	std	Z+6, r24	; 0x06
		g_str_Timer.u16_timer_compare_MatchValue=		stPtr_a_TimerConfig->u16_timer_compare_match_value;
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	91 87       	std	Z+9, r25	; 0x09
     fb2:	80 87       	std	Z+8, r24	; 0x08
		
		l_ret = TIMERx_init(&g_str_Timer);
     fb4:	cf 01       	movw	r24, r30
     fb6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <TIMERx_init>
     fba:	18 2f       	mov	r17, r24
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->ptr_call_back_func , stPtr_a_TimerConfig->enu_timer_no);
     fbc:	68 81       	ld	r22, Y
     fbe:	8e 81       	ldd	r24, Y+6	; 0x06
     fc0:	9f 81       	ldd	r25, Y+7	; 0x07
     fc2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <TIMERx_setCallBack>
     fc6:	81 2b       	or	r24, r17
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <TIMER_MANGER_init+0x42>
timerm_enu_return_state_t TIMER_MANGER_init(const timerm_str_config_t *stPtr_a_TimerConfig)
{
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if( (stPtr_a_TimerConfig->enu_timer_no >= INVALID_TIMER_TYPE) )
	{
		l_ret = TIMERM_E_NOK;
     fca:	81 e0       	ldi	r24, 0x01	; 1
		l_ret = TIMERx_init(&g_str_Timer);
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->ptr_call_back_func , stPtr_a_TimerConfig->enu_timer_no);
	}
	return l_ret;
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	08 95       	ret

00000fd4 <TIMER_MANGER_start>:

timerm_enu_return_state_t TIMER_MANGER_start(const timer_enu_clock_t copy_enu_timer_clock, const timer_enu_timer_number_t copy_enu_timer_num)
{
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if( (copy_enu_timer_clock >= INVALID_TIMER_CLK)||(copy_enu_timer_num >= INVALID_TIMER_TYPE) )
     fd4:	8a 30       	cpi	r24, 0x0A	; 10
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <TIMER_MANGER_start+0xe>
     fd8:	63 30       	cpi	r22, 0x03	; 3
     fda:	28 f4       	brcc	.+10     	; 0xfe6 <TIMER_MANGER_start+0x12>
		l_ret = TIMERM_E_NOK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(copy_enu_timer_clock,copy_enu_timer_num);
     fdc:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIMERx_start>
     fe0:	08 95       	ret
timerm_enu_return_state_t TIMER_MANGER_start(const timer_enu_clock_t copy_enu_timer_clock, const timer_enu_timer_number_t copy_enu_timer_num)
{
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if( (copy_enu_timer_clock >= INVALID_TIMER_CLK)||(copy_enu_timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = TIMERM_E_NOK;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	08 95       	ret
     fe6:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(copy_enu_timer_clock,copy_enu_timer_num);
	}
	return l_ret;
}
     fe8:	08 95       	ret

00000fea <TIMER_MANGER_stop>:

timerm_enu_return_state_t TIMER_MANGER_stop(const timer_enu_timer_number_t copy_enu_timer_num)
{
	
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if(copy_enu_timer_num >= INVALID_TIMER_TYPE)
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	18 f4       	brcc	.+6      	; 0xff4 <TIMER_MANGER_stop+0xa>
		l_ret = TIMERM_E_NOK;
	}
	else
	{
		/*stop the clock for the specific timer*/
		l_ret = TIMERx_stop(copy_enu_timer_num);
     fee:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TIMERx_stop>
     ff2:	08 95       	ret
{
	
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if(copy_enu_timer_num >= INVALID_TIMER_TYPE)
	{
		l_ret = TIMERM_E_NOK;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*stop the clock for the specific timer*/
		l_ret = TIMERx_stop(copy_enu_timer_num);
	}
	return l_ret;
}
     ff6:	08 95       	ret

00000ff8 <TIMER_MANGER_setValue>:

timerm_enu_return_state_t TIMER_MANGER_setValue(const timer_enu_timer_number_t copy_enu_timer_num , uint16_t u16_a_InitialValue)
{
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if(copy_enu_timer_num >= INVALID_TIMER_TYPE)
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	18 f4       	brcc	.+6      	; 0x1002 <TIMER_MANGER_setValue+0xa>
		l_ret = TIMERM_E_NOK;
	}
	else
	{
		/*stop the clock for the specific timer*/
		l_ret =  TIMERx_setValue(copy_enu_timer_num , u16_a_InitialValue);
     ffc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <TIMERx_setValue>
    1000:	08 95       	ret
timerm_enu_return_state_t TIMER_MANGER_setValue(const timer_enu_timer_number_t copy_enu_timer_num , uint16_t u16_a_InitialValue)
{
	timerm_enu_return_state_t l_ret = TIMERM_E_OK;
	if(copy_enu_timer_num >= INVALID_TIMER_TYPE)
	{
		l_ret = TIMERM_E_NOK;
    1002:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*stop the clock for the specific timer*/
		l_ret =  TIMERx_setValue(copy_enu_timer_num , u16_a_InitialValue);
	}
	return l_ret;
    1004:	08 95       	ret

00001006 <main>:
#include "APP/APP_interface.h"

int main(void)
{

	APP_start();
    1006:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <APP_start>
	
}
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	08 95       	ret

00001010 <ADC_channel_read_ISR>:
	else{
		enu_return_state = ADC_NULL_PTR;
	}
	
	return enu_return_state;
}
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	dc 01       	movw	r26, r24
    1016:	fb 01       	movw	r30, r22
    1018:	96 b1       	in	r25, 0x06	; 6
    101a:	97 7f       	andi	r25, 0xF7	; 247
    101c:	96 b9       	out	0x06, r25	; 6
    101e:	0d 90       	ld	r0, X+
    1020:	bc 91       	ld	r27, X
    1022:	a0 2d       	mov	r26, r0
    1024:	13 96       	adiw	r26, 0x03	; 3
    1026:	8c 91       	ld	r24, X
    1028:	81 11       	cpse	r24, r1
    102a:	08 c0       	rjmp	.+16     	; 0x103c <ADC_channel_read_ISR+0x2c>
    102c:	24 b1       	in	r18, 0x04	; 4
    102e:	85 b1       	in	r24, 0x05	; 5
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	98 2f       	mov	r25, r24
    1034:	88 27       	eor	r24, r24
    1036:	bc 01       	movw	r22, r24
    1038:	62 2b       	or	r22, r18
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <ADC_channel_read_ISR+0x46>
    103c:	24 b1       	in	r18, 0x04	; 4
    103e:	22 95       	swap	r18
    1040:	26 95       	lsr	r18
    1042:	26 95       	lsr	r18
    1044:	23 70       	andi	r18, 0x03	; 3
    1046:	85 b1       	in	r24, 0x05	; 5
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	bc 01       	movw	r22, r24
    1054:	62 2b       	or	r22, r18
    1056:	c0 81       	ld	r28, Z
    1058:	d1 81       	ldd	r29, Z+1	; 0x01
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__floatunsisf>
    1062:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Quantisation_step>
    1066:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Quantisation_step+0x1>
    106a:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <Quantisation_step+0x2>
    106e:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <Quantisation_step+0x3>
    1072:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1076:	68 83       	st	Y, r22
    1078:	79 83       	std	Y+1, r23	; 0x01
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	9b 83       	std	Y+3, r25	; 0x03
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <ADC_init>:
    1084:	fc 01       	movw	r30, r24
    1086:	89 2b       	or	r24, r25
    1088:	d1 f1       	breq	.+116    	; 0x10fe <ADC_init+0x7a>
    108a:	80 81       	ld	r24, Z
    108c:	92 81       	ldd	r25, Z+2	; 0x02
    108e:	29 2f       	mov	r18, r25
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	22 0f       	add	r18, r18
    109c:	33 1f       	adc	r19, r19
    109e:	28 2b       	or	r18, r24
    10a0:	20 68       	ori	r18, 0x80	; 128
    10a2:	26 b9       	out	0x06, r18	; 6
    10a4:	81 81       	ldd	r24, Z+1	; 0x01
    10a6:	40 e4       	ldi	r20, 0x40	; 64
    10a8:	84 9f       	mul	r24, r20
    10aa:	90 01       	movw	r18, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	92 81       	ldd	r25, Z+2	; 0x02
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	94 9f       	mul	r25, r20
    10b4:	c0 01       	movw	r24, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	82 2b       	or	r24, r18
    10ba:	87 b9       	out	0x07, r24	; 7
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <ADC_init+0x48>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	8a 30       	cpi	r24, 0x0A	; 10
    10ce:	91 05       	cpc	r25, r1
    10d0:	d4 f3       	brlt	.-12     	; 0x10c6 <ADC_init+0x42>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__floatunsisf>
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 ea       	ldi	r24, 0xA0	; 160
    10e4:	90 e4       	ldi	r25, 0x40	; 64
    10e6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__divsf3>
    10ea:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <Quantisation_step>
    10ee:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <Quantisation_step+0x1>
    10f2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Quantisation_step+0x2>
    10f6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Quantisation_step+0x3>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	08 95       	ret
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	08 95       	ret

00001102 <ADC_channel_init>:
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	59 f0       	breq	.+22     	; 0x111c <ADC_channel_init+0x1a>
    1106:	fc 01       	movw	r30, r24
    1108:	20 81       	ld	r18, Z
    110a:	21 11       	cpse	r18, r1
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <ADC_channel_init+0x1e>
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	61 81       	ldd	r22, Z+1	; 0x01
    1112:	82 2f       	mov	r24, r18
    1114:	0e 94 32 09 	call	0x1264	; 0x1264 <DIO_init>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	08 95       	ret
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	08 95       	ret

00001124 <ADC_channel_read>:
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	fc 01       	movw	r30, r24
    112a:	61 15       	cp	r22, r1
    112c:	71 05       	cpc	r23, r1
    112e:	29 f4       	brne	.+10     	; 0x113a <ADC_channel_read+0x16>
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	11 f4       	brne	.+4      	; 0x113a <ADC_channel_read+0x16>
    1136:	89 2b       	or	r24, r25
    1138:	e9 f1       	breq	.+122    	; 0x11b4 <ADC_channel_read+0x90>
    113a:	db 01       	movw	r26, r22
    113c:	9c 91       	ld	r25, X
    113e:	91 11       	cpse	r25, r1
    1140:	3b c0       	rjmp	.+118    	; 0x11b8 <ADC_channel_read+0x94>
    1142:	36 99       	sbic	0x06, 6	; 6
    1144:	fe cf       	rjmp	.-4      	; 0x1142 <ADC_channel_read+0x1e>
    1146:	87 b1       	in	r24, 0x07	; 7
    1148:	db 01       	movw	r26, r22
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	9c 91       	ld	r25, X
    114e:	80 7e       	andi	r24, 0xE0	; 224
    1150:	89 2b       	or	r24, r25
    1152:	87 b9       	out	0x07, r24	; 7
    1154:	86 b1       	in	r24, 0x06	; 6
    1156:	80 64       	ori	r24, 0x40	; 64
    1158:	86 b9       	out	0x06, r24	; 6
    115a:	34 9b       	sbis	0x06, 4	; 6
    115c:	fe cf       	rjmp	.-4      	; 0x115a <ADC_channel_read+0x36>
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	81 11       	cpse	r24, r1
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <ADC_channel_read+0x4e>
    1164:	84 b1       	in	r24, 0x04	; 4
    1166:	65 b1       	in	r22, 0x05	; 5
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	76 2f       	mov	r23, r22
    116c:	66 27       	eor	r22, r22
    116e:	68 2b       	or	r22, r24
    1170:	0c c0       	rjmp	.+24     	; 0x118a <ADC_channel_read+0x66>
    1172:	84 b1       	in	r24, 0x04	; 4
    1174:	82 95       	swap	r24
    1176:	86 95       	lsr	r24
    1178:	86 95       	lsr	r24
    117a:	83 70       	andi	r24, 0x03	; 3
    117c:	65 b1       	in	r22, 0x05	; 5
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	68 2b       	or	r22, r24
    118a:	ea 01       	movw	r28, r20
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__floatunsisf>
    1194:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Quantisation_step>
    1198:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Quantisation_step+0x1>
    119c:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <Quantisation_step+0x2>
    11a0:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <Quantisation_step+0x3>
    11a4:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    11a8:	68 83       	st	Y, r22
    11aa:	79 83       	std	Y+1, r23	; 0x01
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	9b 83       	std	Y+3, r25	; 0x03
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <ADC_channel_read+0x96>
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <ADC_channel_read+0x96>
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <__vector_16>:
		**data = Quantisation_step*adc_data_temp;
	
}


ISR(ADC){
    11c0:	1f 92       	push	r1
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	0f 92       	push	r0
    11c8:	11 24       	eor	r1, r1
    11ca:	2f 93       	push	r18
    11cc:	3f 93       	push	r19
    11ce:	4f 93       	push	r20
    11d0:	5f 93       	push	r21
    11d2:	6f 93       	push	r22
    11d4:	7f 93       	push	r23
    11d6:	8f 93       	push	r24
    11d8:	9f 93       	push	r25
    11da:	af 93       	push	r26
    11dc:	bf 93       	push	r27
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <__vector_16+0x28>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <__vector_16+0x2a>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	double *data;
	adc_str_config_t *adc_config;
	if(callback_ISR != NULL)
    11ee:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <callback_ISR>
    11f2:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <callback_ISR+0x1>
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	31 f0       	breq	.+12     	; 0x1206 <__vector_16+0x46>
		(*callback_ISR)(&adc_config, &data);
    11fa:	be 01       	movw	r22, r28
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	ce 01       	movw	r24, r28
    1202:	03 96       	adiw	r24, 0x03	; 3
    1204:	09 95       	icall
	ADC_channel_read_ISR(&adc_config, &data);
    1206:	be 01       	movw	r22, r28
    1208:	6f 5f       	subi	r22, 0xFF	; 255
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	ce 01       	movw	r24, r28
    120e:	03 96       	adiw	r24, 0x03	; 3
    1210:	0e 94 08 08 	call	0x1010	; 0x1010 <ADC_channel_read_ISR>
	if(adc_end_ISR != NULL)
    1214:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <adc_end_ISR>
    1218:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <adc_end_ISR+0x1>
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	19 f0       	breq	.+6      	; 0x1226 <__vector_16+0x66>
		(*adc_end_ISR)(data);
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	09 95       	icall
	
	callback_ISR = NULL;
    1226:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <callback_ISR+0x1>
    122a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <callback_ISR>
	adc_end_ISR = NULL;
    122e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <adc_end_ISR+0x1>
    1232:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <adc_end_ISR>
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <DIO_init>:

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;

	if (copy_enu_pin < DIO_MAX_PINS)
    1264:	68 30       	cpi	r22, 0x08	; 8
    1266:	a0 f5       	brcc	.+104    	; 0x12d0 <DIO_init+0x6c>
	{
		if (copy_enu_port == PORTA)
    1268:	81 11       	cpse	r24, r1
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= copy_enu_direction << copy_enu_pin;
    126c:	8a b3       	in	r24, 0x1a	; 26
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_init+0x12>
    1272:	44 0f       	add	r20, r20
    1274:	55 1f       	adc	r21, r21
    1276:	6a 95       	dec	r22
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_init+0xe>
    127a:	48 2b       	or	r20, r24
    127c:	4a bb       	out	0x1a, r20	; 26
#include "DIO_interface.h"
#include "DIO_private_.h"

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	08 95       	ret
		if (copy_enu_port == PORTA)
		{
			DATA_DIRECTION_PORTA |= copy_enu_direction << copy_enu_pin;
			
		}
		else if (copy_enu_port == PORTB)
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	59 f4       	brne	.+22     	; 0x129c <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= copy_enu_direction << copy_enu_pin;
    1286:	87 b3       	in	r24, 0x17	; 23
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_init+0x2c>
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	6a 95       	dec	r22
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_init+0x28>
    1294:	48 2b       	or	r20, r24
    1296:	47 bb       	out	0x17, r20	; 23
#include "DIO_interface.h"
#include "DIO_private_.h"

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret
		else if (copy_enu_port == PORTB)
		{
			DATA_DIRECTION_PORTB |= copy_enu_direction << copy_enu_pin;
			
		}
		else if (copy_enu_port == PORTC)
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	59 f4       	brne	.+22     	; 0x12b6 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= copy_enu_direction << copy_enu_pin;
    12a0:	84 b3       	in	r24, 0x14	; 20
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_init+0x46>
    12a6:	44 0f       	add	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	6a 95       	dec	r22
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_init+0x42>
    12ae:	48 2b       	or	r20, r24
    12b0:	44 bb       	out	0x14, r20	; 20
#include "DIO_interface.h"
#include "DIO_private_.h"

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	08 95       	ret
		else if (copy_enu_port == PORTC)
		{
			DATA_DIRECTION_PORTC |= copy_enu_direction << copy_enu_pin;
			
		}
		else if (copy_enu_port == PORTD)
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	69 f4       	brne	.+26     	; 0x12d4 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= copy_enu_direction << copy_enu_pin;
    12ba:	81 b3       	in	r24, 0x11	; 17
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_init+0x60>
    12c0:	44 0f       	add	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	6a 95       	dec	r22
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_init+0x5c>
    12c8:	48 2b       	or	r20, r24
    12ca:	41 bb       	out	0x11, r20	; 17
#include "DIO_interface.h"
#include "DIO_private_.h"

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret
			enu_return_state = DIO_INVALID_PORT;
		}
		
	}
	else{
		enu_return_state = DIO_INVALID_PIN;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	08 95       	ret
			DATA_DIRECTION_PORTD |= copy_enu_direction << copy_enu_pin;
			
		}
		else
		{
			enu_return_state = DIO_INVALID_PORT;
    12d4:	82 e0       	ldi	r24, 0x02	; 2
	else{
		enu_return_state = DIO_INVALID_PIN;
	}

	return enu_return_state;
}
    12d6:	08 95       	ret

000012d8 <DIO_write_pin>:
dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;

	if (copy_enu_pin < DIO_MAX_PINS)
    12d8:	68 30       	cpi	r22, 0x08	; 8
    12da:	08 f0       	brcs	.+2      	; 0x12de <DIO_write_pin+0x6>
    12dc:	74 c0       	rjmp	.+232    	; 0x13c6 <DIO_write_pin+0xee>
	{
		if (copy_enu_port == PORTA)
    12de:	81 11       	cpse	r24, r1
    12e0:	1b c0       	rjmp	.+54     	; 0x1318 <DIO_write_pin+0x40>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    12e2:	41 30       	cpi	r20, 0x01	; 1
    12e4:	61 f4       	brne	.+24     	; 0x12fe <DIO_write_pin+0x26>
			{
				WR_PORT_A |= (U8_ONE_VALUE << copy_enu_pin);
    12e6:	2b b3       	in	r18, 0x1b	; 27
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_write_pin+0x1a>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	6a 95       	dec	r22
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_write_pin+0x16>
    12f6:	82 2b       	or	r24, r18
    12f8:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(U8_ONE_VALUE << copy_enu_pin);
			}
			return DIO_OK;
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_A |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_A &= ~(U8_ONE_VALUE << copy_enu_pin);
    12fe:	2b b3       	in	r18, 0x1b	; 27
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_write_pin+0x32>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	6a 95       	dec	r22
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_write_pin+0x2e>
    130e:	80 95       	com	r24
    1310:	82 23       	and	r24, r18
    1312:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_OK;
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	08 95       	ret
		}
		else if (copy_enu_port == PORTB)
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	d9 f4       	brne	.+54     	; 0x1352 <DIO_write_pin+0x7a>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    131c:	41 30       	cpi	r20, 0x01	; 1
    131e:	61 f4       	brne	.+24     	; 0x1338 <DIO_write_pin+0x60>
			{
				WR_PORT_B |= (U8_ONE_VALUE << copy_enu_pin);
    1320:	28 b3       	in	r18, 0x18	; 24
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_write_pin+0x54>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	6a 95       	dec	r22
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_write_pin+0x50>
    1330:	82 2b       	or	r24, r18
    1332:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(U8_ONE_VALUE << copy_enu_pin);
			}
			return DIO_OK;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_B |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_B &= ~(U8_ONE_VALUE << copy_enu_pin);
    1338:	28 b3       	in	r18, 0x18	; 24
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_write_pin+0x6c>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	6a 95       	dec	r22
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_write_pin+0x68>
    1348:	80 95       	com	r24
    134a:	82 23       	and	r24, r18
    134c:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_OK;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret
		}
		else if (copy_enu_port == PORTC)
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	d9 f4       	brne	.+54     	; 0x138c <DIO_write_pin+0xb4>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    1356:	41 30       	cpi	r20, 0x01	; 1
    1358:	61 f4       	brne	.+24     	; 0x1372 <DIO_write_pin+0x9a>
			{
				WR_PORT_C |= (U8_ONE_VALUE << copy_enu_pin);
    135a:	25 b3       	in	r18, 0x15	; 21
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_write_pin+0x8e>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	6a 95       	dec	r22
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_write_pin+0x8a>
    136a:	82 2b       	or	r24, r18
    136c:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(U8_ONE_VALUE << copy_enu_pin);
			}
			return DIO_OK;
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_C |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_C &= ~(U8_ONE_VALUE << copy_enu_pin);
    1372:	25 b3       	in	r18, 0x15	; 21
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_write_pin+0xa6>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	6a 95       	dec	r22
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_write_pin+0xa2>
    1382:	80 95       	com	r24
    1384:	82 23       	and	r24, r18
    1386:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_OK;
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	08 95       	ret
		}
		else if (copy_enu_port == PORTD)
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	e9 f4       	brne	.+58     	; 0x13ca <DIO_write_pin+0xf2>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    1390:	41 30       	cpi	r20, 0x01	; 1
    1392:	61 f4       	brne	.+24     	; 0x13ac <DIO_write_pin+0xd4>
			{
				WR_PORT_D |= (U8_ONE_VALUE << copy_enu_pin);
    1394:	22 b3       	in	r18, 0x12	; 18
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_write_pin+0xc8>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	6a 95       	dec	r22
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_write_pin+0xc4>
    13a4:	82 2b       	or	r24, r18
    13a6:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(U8_ONE_VALUE << copy_enu_pin);
			}
			return DIO_OK;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_D |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_D &= ~(U8_ONE_VALUE << copy_enu_pin);
    13ac:	22 b3       	in	r18, 0x12	; 18
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_write_pin+0xe0>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	6a 95       	dec	r22
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_write_pin+0xdc>
    13bc:	80 95       	com	r24
    13be:	82 23       	and	r24, r18
    13c0:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_OK;
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	08 95       	ret
			enu_return_state = DIO_INVALID_PORT;
		}
		
	}
	else{
		enu_return_state = DIO_INVALID_PIN;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	08 95       	ret
			}
			return DIO_OK;
		}
		else
		{
			enu_return_state = DIO_INVALID_PORT;
    13ca:	82 e0       	ldi	r24, 0x02	; 2
	}



	return enu_return_state;
}
    13cc:	08 95       	ret

000013ce <DIO_read_pin>:
dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;

	if (copy_enu_pin < DIO_MAX_PINS)
    13ce:	68 30       	cpi	r22, 0x08	; 8
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <DIO_read_pin+0x6>
    13d2:	64 c0       	rjmp	.+200    	; 0x149c <DIO_read_pin+0xce>
	{
		if (copy_enu_port == PORTA)
    13d4:	81 11       	cpse	r24, r1
    13d6:	17 c0       	rjmp	.+46     	; 0x1406 <DIO_read_pin+0x38>
		{
			*ptr_enu_state = ((RE_PORT_A & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    13d8:	79 b3       	in	r23, 0x19	; 25
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 01       	movw	r18, r24
    13e0:	06 2e       	mov	r0, r22
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_read_pin+0x1a>
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_read_pin+0x16>
    13ec:	87 2f       	mov	r24, r23
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	82 23       	and	r24, r18
    13f2:	93 23       	and	r25, r19
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_read_pin+0x2c>
    13f6:	95 95       	asr	r25
    13f8:	87 95       	ror	r24
    13fa:	6a 95       	dec	r22
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_read_pin+0x28>
    13fe:	fa 01       	movw	r30, r20
    1400:	80 83       	st	Z, r24
}

dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	08 95       	ret
		if (copy_enu_port == PORTA)
		{
			*ptr_enu_state = ((RE_PORT_A & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else if (copy_enu_port == PORTB)
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	b9 f4       	brne	.+46     	; 0x1438 <DIO_read_pin+0x6a>
		{
			*ptr_enu_state = ((RE_PORT_B & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    140a:	76 b3       	in	r23, 0x16	; 22
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 01       	movw	r18, r24
    1412:	06 2e       	mov	r0, r22
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_read_pin+0x4c>
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_read_pin+0x48>
    141e:	87 2f       	mov	r24, r23
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	82 23       	and	r24, r18
    1424:	93 23       	and	r25, r19
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_read_pin+0x5e>
    1428:	95 95       	asr	r25
    142a:	87 95       	ror	r24
    142c:	6a 95       	dec	r22
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_read_pin+0x5a>
    1430:	fa 01       	movw	r30, r20
    1432:	80 83       	st	Z, r24
}

dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret
		else if (copy_enu_port == PORTB)
		{
			*ptr_enu_state = ((RE_PORT_B & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else if (copy_enu_port == PORTC)
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	b9 f4       	brne	.+46     	; 0x146a <DIO_read_pin+0x9c>
		{
			*ptr_enu_state = ((RE_PORT_C & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    143c:	73 b3       	in	r23, 0x13	; 19
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 01       	movw	r18, r24
    1444:	06 2e       	mov	r0, r22
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_read_pin+0x7e>
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_read_pin+0x7a>
    1450:	87 2f       	mov	r24, r23
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	82 23       	and	r24, r18
    1456:	93 23       	and	r25, r19
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_read_pin+0x90>
    145a:	95 95       	asr	r25
    145c:	87 95       	ror	r24
    145e:	6a 95       	dec	r22
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_read_pin+0x8c>
    1462:	fa 01       	movw	r30, r20
    1464:	80 83       	st	Z, r24
}

dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret
		else if (copy_enu_port == PORTC)
		{
			*ptr_enu_state = ((RE_PORT_C & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else if (copy_enu_port == PORTD)
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	c9 f4       	brne	.+50     	; 0x14a0 <DIO_read_pin+0xd2>
		{
			*ptr_enu_state = ((RE_PORT_D & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    146e:	70 b3       	in	r23, 0x10	; 16
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 01       	movw	r18, r24
    1476:	06 2e       	mov	r0, r22
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_read_pin+0xb0>
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_read_pin+0xac>
    1482:	87 2f       	mov	r24, r23
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	82 23       	and	r24, r18
    1488:	93 23       	and	r25, r19
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_read_pin+0xc2>
    148c:	95 95       	asr	r25
    148e:	87 95       	ror	r24
    1490:	6a 95       	dec	r22
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_read_pin+0xbe>
    1494:	fa 01       	movw	r30, r20
    1496:	80 83       	st	Z, r24
}

dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	08 95       	ret
			enu_return_state = DIO_INVALID_PORT;
		}
		
	}
	else{
		enu_return_state = DIO_INVALID_PIN;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	08 95       	ret
			*ptr_enu_state = ((RE_PORT_D & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else
		{
			enu_return_state = DIO_INVALID_PORT;
    14a0:	82 e0       	ldi	r24, 0x02	; 2
	else{
		enu_return_state = DIO_INVALID_PIN;
	}

	return enu_return_state;
    14a2:	08 95       	ret

000014a4 <TIMERx_selectClk>:
				 enu_return_state |=  TIMER_NOT_OK;
				break;
		}
	}
	return  enu_return_state;
}
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <TIMERx_selectClk+0x6>
    14a8:	34 c1       	rjmp	.+616    	; 0x1712 <TIMERx_selectClk+0x26e>
    14aa:	6a 30       	cpi	r22, 0x0A	; 10
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <TIMERx_selectClk+0xc>
    14ae:	33 c1       	rjmp	.+614    	; 0x1716 <TIMERx_selectClk+0x272>
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <TIMERx_selectClk+0x12>
    14b4:	68 c0       	rjmp	.+208    	; 0x1586 <TIMERx_selectClk+0xe2>
    14b6:	20 f0       	brcs	.+8      	; 0x14c0 <TIMERx_selectClk+0x1c>
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	09 f4       	brne	.+2      	; 0x14be <TIMERx_selectClk+0x1a>
    14bc:	c7 c0       	rjmp	.+398    	; 0x164c <TIMERx_selectClk+0x1a8>
    14be:	2d c1       	rjmp	.+602    	; 0x171a <TIMERx_selectClk+0x276>
    14c0:	86 2f       	mov	r24, r22
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	8a 30       	cpi	r24, 0x0A	; 10
    14c6:	91 05       	cpc	r25, r1
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <TIMERx_selectClk+0x28>
    14ca:	29 c1       	rjmp	.+594    	; 0x171e <TIMERx_selectClk+0x27a>
    14cc:	fc 01       	movw	r30, r24
    14ce:	e6 5d       	subi	r30, 0xD6	; 214
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__tablejump2__>
    14d6:	83 b7       	in	r24, 0x33	; 51
    14d8:	8e 7f       	andi	r24, 0xFE	; 254
    14da:	83 bf       	out	0x33, r24	; 51
    14dc:	83 b7       	in	r24, 0x33	; 51
    14de:	8d 7f       	andi	r24, 0xFD	; 253
    14e0:	83 bf       	out	0x33, r24	; 51
    14e2:	83 b7       	in	r24, 0x33	; 51
    14e4:	8b 7f       	andi	r24, 0xFB	; 251
    14e6:	83 bf       	out	0x33, r24	; 51
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	08 95       	ret
    14ec:	83 b7       	in	r24, 0x33	; 51
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	83 bf       	out	0x33, r24	; 51
    14f2:	83 b7       	in	r24, 0x33	; 51
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	83 bf       	out	0x33, r24	; 51
    14f8:	83 b7       	in	r24, 0x33	; 51
    14fa:	8b 7f       	andi	r24, 0xFB	; 251
    14fc:	83 bf       	out	0x33, r24	; 51
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	08 95       	ret
    1502:	83 b7       	in	r24, 0x33	; 51
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	83 bf       	out	0x33, r24	; 51
    1508:	83 b7       	in	r24, 0x33	; 51
    150a:	82 60       	ori	r24, 0x02	; 2
    150c:	83 bf       	out	0x33, r24	; 51
    150e:	83 b7       	in	r24, 0x33	; 51
    1510:	8b 7f       	andi	r24, 0xFB	; 251
    1512:	83 bf       	out	0x33, r24	; 51
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	08 95       	ret
    1518:	83 b7       	in	r24, 0x33	; 51
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	83 bf       	out	0x33, r24	; 51
    151e:	83 b7       	in	r24, 0x33	; 51
    1520:	82 60       	ori	r24, 0x02	; 2
    1522:	83 bf       	out	0x33, r24	; 51
    1524:	83 b7       	in	r24, 0x33	; 51
    1526:	8b 7f       	andi	r24, 0xFB	; 251
    1528:	83 bf       	out	0x33, r24	; 51
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	08 95       	ret
    152e:	83 b7       	in	r24, 0x33	; 51
    1530:	8e 7f       	andi	r24, 0xFE	; 254
    1532:	83 bf       	out	0x33, r24	; 51
    1534:	83 b7       	in	r24, 0x33	; 51
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	83 bf       	out	0x33, r24	; 51
    153a:	83 b7       	in	r24, 0x33	; 51
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	83 bf       	out	0x33, r24	; 51
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	08 95       	ret
    1544:	83 b7       	in	r24, 0x33	; 51
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	83 bf       	out	0x33, r24	; 51
    154a:	83 b7       	in	r24, 0x33	; 51
    154c:	8d 7f       	andi	r24, 0xFD	; 253
    154e:	83 bf       	out	0x33, r24	; 51
    1550:	83 b7       	in	r24, 0x33	; 51
    1552:	84 60       	ori	r24, 0x04	; 4
    1554:	83 bf       	out	0x33, r24	; 51
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	08 95       	ret
    155a:	83 b7       	in	r24, 0x33	; 51
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	83 bf       	out	0x33, r24	; 51
    1560:	83 b7       	in	r24, 0x33	; 51
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	83 bf       	out	0x33, r24	; 51
    1566:	83 b7       	in	r24, 0x33	; 51
    1568:	84 60       	ori	r24, 0x04	; 4
    156a:	83 bf       	out	0x33, r24	; 51
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	08 95       	ret
    1570:	83 b7       	in	r24, 0x33	; 51
    1572:	81 60       	ori	r24, 0x01	; 1
    1574:	83 bf       	out	0x33, r24	; 51
    1576:	83 b7       	in	r24, 0x33	; 51
    1578:	82 60       	ori	r24, 0x02	; 2
    157a:	83 bf       	out	0x33, r24	; 51
    157c:	83 b7       	in	r24, 0x33	; 51
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	83 bf       	out	0x33, r24	; 51
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret
    1586:	86 2f       	mov	r24, r22
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	8a 30       	cpi	r24, 0x0A	; 10
    158c:	91 05       	cpc	r25, r1
    158e:	08 f0       	brcs	.+2      	; 0x1592 <TIMERx_selectClk+0xee>
    1590:	c8 c0       	rjmp	.+400    	; 0x1722 <TIMERx_selectClk+0x27e>
    1592:	fc 01       	movw	r30, r24
    1594:	ec 5c       	subi	r30, 0xCC	; 204
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__tablejump2__>
    159c:	8e b5       	in	r24, 0x2e	; 46
    159e:	8e 7f       	andi	r24, 0xFE	; 254
    15a0:	8e bd       	out	0x2e, r24	; 46
    15a2:	8e b5       	in	r24, 0x2e	; 46
    15a4:	8d 7f       	andi	r24, 0xFD	; 253
    15a6:	8e bd       	out	0x2e, r24	; 46
    15a8:	8e b5       	in	r24, 0x2e	; 46
    15aa:	8b 7f       	andi	r24, 0xFB	; 251
    15ac:	8e bd       	out	0x2e, r24	; 46
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	08 95       	ret
    15b2:	8e b5       	in	r24, 0x2e	; 46
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	8e bd       	out	0x2e, r24	; 46
    15b8:	8e b5       	in	r24, 0x2e	; 46
    15ba:	8d 7f       	andi	r24, 0xFD	; 253
    15bc:	8e bd       	out	0x2e, r24	; 46
    15be:	8e b5       	in	r24, 0x2e	; 46
    15c0:	8b 7f       	andi	r24, 0xFB	; 251
    15c2:	8e bd       	out	0x2e, r24	; 46
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	08 95       	ret
    15c8:	8e b5       	in	r24, 0x2e	; 46
    15ca:	8e 7f       	andi	r24, 0xFE	; 254
    15cc:	8e bd       	out	0x2e, r24	; 46
    15ce:	8e b5       	in	r24, 0x2e	; 46
    15d0:	82 60       	ori	r24, 0x02	; 2
    15d2:	8e bd       	out	0x2e, r24	; 46
    15d4:	8e b5       	in	r24, 0x2e	; 46
    15d6:	8b 7f       	andi	r24, 0xFB	; 251
    15d8:	8e bd       	out	0x2e, r24	; 46
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	08 95       	ret
    15de:	8e b5       	in	r24, 0x2e	; 46
    15e0:	81 60       	ori	r24, 0x01	; 1
    15e2:	8e bd       	out	0x2e, r24	; 46
    15e4:	8e b5       	in	r24, 0x2e	; 46
    15e6:	82 60       	ori	r24, 0x02	; 2
    15e8:	8e bd       	out	0x2e, r24	; 46
    15ea:	8e b5       	in	r24, 0x2e	; 46
    15ec:	8b 7f       	andi	r24, 0xFB	; 251
    15ee:	8e bd       	out	0x2e, r24	; 46
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	08 95       	ret
    15f4:	8e b5       	in	r24, 0x2e	; 46
    15f6:	8e 7f       	andi	r24, 0xFE	; 254
    15f8:	8e bd       	out	0x2e, r24	; 46
    15fa:	8e b5       	in	r24, 0x2e	; 46
    15fc:	8d 7f       	andi	r24, 0xFD	; 253
    15fe:	8e bd       	out	0x2e, r24	; 46
    1600:	8e b5       	in	r24, 0x2e	; 46
    1602:	84 60       	ori	r24, 0x04	; 4
    1604:	8e bd       	out	0x2e, r24	; 46
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	08 95       	ret
    160a:	8e b5       	in	r24, 0x2e	; 46
    160c:	81 60       	ori	r24, 0x01	; 1
    160e:	8e bd       	out	0x2e, r24	; 46
    1610:	8e b5       	in	r24, 0x2e	; 46
    1612:	8d 7f       	andi	r24, 0xFD	; 253
    1614:	8e bd       	out	0x2e, r24	; 46
    1616:	8e b5       	in	r24, 0x2e	; 46
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8e bd       	out	0x2e, r24	; 46
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret
    1620:	8e b5       	in	r24, 0x2e	; 46
    1622:	8e 7f       	andi	r24, 0xFE	; 254
    1624:	8e bd       	out	0x2e, r24	; 46
    1626:	8e b5       	in	r24, 0x2e	; 46
    1628:	82 60       	ori	r24, 0x02	; 2
    162a:	8e bd       	out	0x2e, r24	; 46
    162c:	8e b5       	in	r24, 0x2e	; 46
    162e:	84 60       	ori	r24, 0x04	; 4
    1630:	8e bd       	out	0x2e, r24	; 46
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	08 95       	ret
    1636:	8e b5       	in	r24, 0x2e	; 46
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	8e bd       	out	0x2e, r24	; 46
    163c:	8e b5       	in	r24, 0x2e	; 46
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	8e bd       	out	0x2e, r24	; 46
    1642:	8e b5       	in	r24, 0x2e	; 46
    1644:	84 60       	ori	r24, 0x04	; 4
    1646:	8e bd       	out	0x2e, r24	; 46
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	08 95       	ret
    164c:	86 2f       	mov	r24, r22
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	91 05       	cpc	r25, r1
    1654:	08 f0       	brcs	.+2      	; 0x1658 <TIMERx_selectClk+0x1b4>
    1656:	67 c0       	rjmp	.+206    	; 0x1726 <TIMERx_selectClk+0x282>
    1658:	fc 01       	movw	r30, r24
    165a:	e2 5c       	subi	r30, 0xC2	; 194
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__tablejump2__>
    1662:	85 b5       	in	r24, 0x25	; 37
    1664:	8b 7f       	andi	r24, 0xFB	; 251
    1666:	85 bd       	out	0x25, r24	; 37
    1668:	85 b5       	in	r24, 0x25	; 37
    166a:	8d 7f       	andi	r24, 0xFD	; 253
    166c:	85 bd       	out	0x25, r24	; 37
    166e:	85 b5       	in	r24, 0x25	; 37
    1670:	8e 7f       	andi	r24, 0xFE	; 254
    1672:	85 bd       	out	0x25, r24	; 37
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	08 95       	ret
    1678:	85 b5       	in	r24, 0x25	; 37
    167a:	84 60       	ori	r24, 0x04	; 4
    167c:	85 bd       	out	0x25, r24	; 37
    167e:	85 b5       	in	r24, 0x25	; 37
    1680:	8d 7f       	andi	r24, 0xFD	; 253
    1682:	85 bd       	out	0x25, r24	; 37
    1684:	85 b5       	in	r24, 0x25	; 37
    1686:	8e 7f       	andi	r24, 0xFE	; 254
    1688:	85 bd       	out	0x25, r24	; 37
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	08 95       	ret
    168e:	85 b5       	in	r24, 0x25	; 37
    1690:	8b 7f       	andi	r24, 0xFB	; 251
    1692:	85 bd       	out	0x25, r24	; 37
    1694:	85 b5       	in	r24, 0x25	; 37
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	85 bd       	out	0x25, r24	; 37
    169a:	85 b5       	in	r24, 0x25	; 37
    169c:	8e 7f       	andi	r24, 0xFE	; 254
    169e:	85 bd       	out	0x25, r24	; 37
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	08 95       	ret
    16a4:	85 b5       	in	r24, 0x25	; 37
    16a6:	84 60       	ori	r24, 0x04	; 4
    16a8:	85 bd       	out	0x25, r24	; 37
    16aa:	85 b5       	in	r24, 0x25	; 37
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	85 bd       	out	0x25, r24	; 37
    16b0:	85 b5       	in	r24, 0x25	; 37
    16b2:	8e 7f       	andi	r24, 0xFE	; 254
    16b4:	85 bd       	out	0x25, r24	; 37
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	08 95       	ret
    16ba:	85 b5       	in	r24, 0x25	; 37
    16bc:	8b 7f       	andi	r24, 0xFB	; 251
    16be:	85 bd       	out	0x25, r24	; 37
    16c0:	85 b5       	in	r24, 0x25	; 37
    16c2:	8d 7f       	andi	r24, 0xFD	; 253
    16c4:	85 bd       	out	0x25, r24	; 37
    16c6:	85 b5       	in	r24, 0x25	; 37
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	85 bd       	out	0x25, r24	; 37
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	08 95       	ret
    16d0:	85 b5       	in	r24, 0x25	; 37
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	85 bd       	out	0x25, r24	; 37
    16d6:	85 b5       	in	r24, 0x25	; 37
    16d8:	8d 7f       	andi	r24, 0xFD	; 253
    16da:	85 bd       	out	0x25, r24	; 37
    16dc:	85 b5       	in	r24, 0x25	; 37
    16de:	81 60       	ori	r24, 0x01	; 1
    16e0:	85 bd       	out	0x25, r24	; 37
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	08 95       	ret
    16e6:	85 b5       	in	r24, 0x25	; 37
    16e8:	8b 7f       	andi	r24, 0xFB	; 251
    16ea:	85 bd       	out	0x25, r24	; 37
    16ec:	85 b5       	in	r24, 0x25	; 37
    16ee:	82 60       	ori	r24, 0x02	; 2
    16f0:	85 bd       	out	0x25, r24	; 37
    16f2:	85 b5       	in	r24, 0x25	; 37
    16f4:	81 60       	ori	r24, 0x01	; 1
    16f6:	85 bd       	out	0x25, r24	; 37
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	08 95       	ret
    16fc:	85 b5       	in	r24, 0x25	; 37
    16fe:	84 60       	ori	r24, 0x04	; 4
    1700:	85 bd       	out	0x25, r24	; 37
    1702:	85 b5       	in	r24, 0x25	; 37
    1704:	82 60       	ori	r24, 0x02	; 2
    1706:	85 bd       	out	0x25, r24	; 37
    1708:	85 b5       	in	r24, 0x25	; 37
    170a:	81 60       	ori	r24, 0x01	; 1
    170c:	85 bd       	out	0x25, r24	; 37
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	08 95       	ret
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	08 95       	ret
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	08 95       	ret
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	08 95       	ret
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	08 95       	ret
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	08 95       	ret
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	08 95       	ret

0000172a <TIMERx_setTimerMode>:
    172a:	fc 01       	movw	r30, r24
    172c:	89 2b       	or	r24, r25
    172e:	09 f4       	brne	.+2      	; 0x1732 <TIMERx_setTimerMode+0x8>
    1730:	93 c2       	rjmp	.+1318   	; 0x1c58 <TIMERx_setTimerMode+0x52e>
    1732:	80 81       	ld	r24, Z
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	08 f0       	brcs	.+2      	; 0x173a <TIMERx_setTimerMode+0x10>
    1738:	91 c2       	rjmp	.+1314   	; 0x1c5c <TIMERx_setTimerMode+0x532>
    173a:	92 81       	ldd	r25, Z+2	; 0x02
    173c:	94 30       	cpi	r25, 0x04	; 4
    173e:	08 f0       	brcs	.+2      	; 0x1742 <TIMERx_setTimerMode+0x18>
    1740:	8f c2       	rjmp	.+1310   	; 0x1c60 <TIMERx_setTimerMode+0x536>
    1742:	23 81       	ldd	r18, Z+3	; 0x03
    1744:	24 30       	cpi	r18, 0x04	; 4
    1746:	08 f0       	brcs	.+2      	; 0x174a <TIMERx_setTimerMode+0x20>
    1748:	8d c2       	rjmp	.+1306   	; 0x1c64 <TIMERx_setTimerMode+0x53a>
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f4       	brne	.+2      	; 0x1750 <TIMERx_setTimerMode+0x26>
    174e:	ad c0       	rjmp	.+346    	; 0x18aa <TIMERx_setTimerMode+0x180>
    1750:	20 f0       	brcs	.+8      	; 0x175a <TIMERx_setTimerMode+0x30>
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	09 f4       	brne	.+2      	; 0x1758 <TIMERx_setTimerMode+0x2e>
    1756:	d8 c1       	rjmp	.+944    	; 0x1b08 <TIMERx_setTimerMode+0x3de>
    1758:	87 c2       	rjmp	.+1294   	; 0x1c68 <TIMERx_setTimerMode+0x53e>
    175a:	91 30       	cpi	r25, 0x01	; 1
    175c:	d9 f0       	breq	.+54     	; 0x1794 <TIMERx_setTimerMode+0x6a>
    175e:	30 f0       	brcs	.+12     	; 0x176c <TIMERx_setTimerMode+0x42>
    1760:	92 30       	cpi	r25, 0x02	; 2
    1762:	09 f4       	brne	.+2      	; 0x1766 <TIMERx_setTimerMode+0x3c>
    1764:	69 c0       	rjmp	.+210    	; 0x1838 <TIMERx_setTimerMode+0x10e>
    1766:	93 30       	cpi	r25, 0x03	; 3
    1768:	f1 f1       	breq	.+124    	; 0x17e6 <TIMERx_setTimerMode+0xbc>
    176a:	80 c2       	rjmp	.+1280   	; 0x1c6c <TIMERx_setTimerMode+0x542>
    176c:	83 b7       	in	r24, 0x33	; 51
    176e:	80 68       	ori	r24, 0x80	; 128
    1770:	83 bf       	out	0x33, r24	; 51
    1772:	83 b7       	in	r24, 0x33	; 51
    1774:	8f 7b       	andi	r24, 0xBF	; 191
    1776:	83 bf       	out	0x33, r24	; 51
    1778:	83 b7       	in	r24, 0x33	; 51
    177a:	87 7f       	andi	r24, 0xF7	; 247
    177c:	83 bf       	out	0x33, r24	; 51
    177e:	83 b7       	in	r24, 0x33	; 51
    1780:	8f 7e       	andi	r24, 0xEF	; 239
    1782:	83 bf       	out	0x33, r24	; 51
    1784:	83 b7       	in	r24, 0x33	; 51
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	83 bf       	out	0x33, r24	; 51
    178a:	89 b7       	in	r24, 0x39	; 57
    178c:	81 60       	ori	r24, 0x01	; 1
    178e:	89 bf       	out	0x39, r24	; 57
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	08 95       	ret
    1794:	83 b7       	in	r24, 0x33	; 51
    1796:	80 64       	ori	r24, 0x40	; 64
    1798:	83 bf       	out	0x33, r24	; 51
    179a:	83 b7       	in	r24, 0x33	; 51
    179c:	87 7f       	andi	r24, 0xF7	; 247
    179e:	83 bf       	out	0x33, r24	; 51
    17a0:	85 81       	ldd	r24, Z+5	; 0x05
    17a2:	81 11       	cpse	r24, r1
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <TIMERx_setTimerMode+0x8c>
    17a6:	83 b7       	in	r24, 0x33	; 51
    17a8:	8f 7e       	andi	r24, 0xEF	; 239
    17aa:	83 bf       	out	0x33, r24	; 51
    17ac:	83 b7       	in	r24, 0x33	; 51
    17ae:	8f 7d       	andi	r24, 0xDF	; 223
    17b0:	83 bf       	out	0x33, r24	; 51
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	15 c0       	rjmp	.+42     	; 0x17e0 <TIMERx_setTimerMode+0xb6>
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	41 f4       	brne	.+16     	; 0x17ca <TIMERx_setTimerMode+0xa0>
    17ba:	83 b7       	in	r24, 0x33	; 51
    17bc:	8f 7e       	andi	r24, 0xEF	; 239
    17be:	83 bf       	out	0x33, r24	; 51
    17c0:	83 b7       	in	r24, 0x33	; 51
    17c2:	80 62       	ori	r24, 0x20	; 32
    17c4:	83 bf       	out	0x33, r24	; 51
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0b c0       	rjmp	.+22     	; 0x17e0 <TIMERx_setTimerMode+0xb6>
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	41 f4       	brne	.+16     	; 0x17de <TIMERx_setTimerMode+0xb4>
    17ce:	83 b7       	in	r24, 0x33	; 51
    17d0:	80 61       	ori	r24, 0x10	; 16
    17d2:	83 bf       	out	0x33, r24	; 51
    17d4:	83 b7       	in	r24, 0x33	; 51
    17d6:	80 62       	ori	r24, 0x20	; 32
    17d8:	83 bf       	out	0x33, r24	; 51
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <TIMERx_setTimerMode+0xb6>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 85       	ldd	r25, Z+8	; 0x08
    17e2:	9c bf       	out	0x3c, r25	; 60
    17e4:	08 95       	ret
    17e6:	83 b7       	in	r24, 0x33	; 51
    17e8:	80 64       	ori	r24, 0x40	; 64
    17ea:	83 bf       	out	0x33, r24	; 51
    17ec:	83 b7       	in	r24, 0x33	; 51
    17ee:	88 60       	ori	r24, 0x08	; 8
    17f0:	83 bf       	out	0x33, r24	; 51
    17f2:	84 81       	ldd	r24, Z+4	; 0x04
    17f4:	81 11       	cpse	r24, r1
    17f6:	08 c0       	rjmp	.+16     	; 0x1808 <TIMERx_setTimerMode+0xde>
    17f8:	83 b7       	in	r24, 0x33	; 51
    17fa:	8f 7e       	andi	r24, 0xEF	; 239
    17fc:	83 bf       	out	0x33, r24	; 51
    17fe:	83 b7       	in	r24, 0x33	; 51
    1800:	8f 7d       	andi	r24, 0xDF	; 223
    1802:	83 bf       	out	0x33, r24	; 51
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	15 c0       	rjmp	.+42     	; 0x1832 <TIMERx_setTimerMode+0x108>
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	41 f4       	brne	.+16     	; 0x181c <TIMERx_setTimerMode+0xf2>
    180c:	83 b7       	in	r24, 0x33	; 51
    180e:	8f 7e       	andi	r24, 0xEF	; 239
    1810:	83 bf       	out	0x33, r24	; 51
    1812:	83 b7       	in	r24, 0x33	; 51
    1814:	80 62       	ori	r24, 0x20	; 32
    1816:	83 bf       	out	0x33, r24	; 51
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <TIMERx_setTimerMode+0x108>
    181c:	83 30       	cpi	r24, 0x03	; 3
    181e:	41 f4       	brne	.+16     	; 0x1830 <TIMERx_setTimerMode+0x106>
    1820:	83 b7       	in	r24, 0x33	; 51
    1822:	80 61       	ori	r24, 0x10	; 16
    1824:	83 bf       	out	0x33, r24	; 51
    1826:	83 b7       	in	r24, 0x33	; 51
    1828:	80 62       	ori	r24, 0x20	; 32
    182a:	83 bf       	out	0x33, r24	; 51
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <TIMERx_setTimerMode+0x108>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 85       	ldd	r25, Z+8	; 0x08
    1834:	9c bf       	out	0x3c, r25	; 60
    1836:	08 95       	ret
    1838:	83 b7       	in	r24, 0x33	; 51
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	83 bf       	out	0x33, r24	; 51
    183e:	83 b7       	in	r24, 0x33	; 51
    1840:	8f 7b       	andi	r24, 0xBF	; 191
    1842:	83 bf       	out	0x33, r24	; 51
    1844:	83 b7       	in	r24, 0x33	; 51
    1846:	88 60       	ori	r24, 0x08	; 8
    1848:	83 bf       	out	0x33, r24	; 51
    184a:	83 81       	ldd	r24, Z+3	; 0x03
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	71 f0       	breq	.+28     	; 0x186c <TIMERx_setTimerMode+0x142>
    1850:	28 f0       	brcs	.+10     	; 0x185c <TIMERx_setTimerMode+0x132>
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	99 f0       	breq	.+38     	; 0x187c <TIMERx_setTimerMode+0x152>
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	c9 f0       	breq	.+50     	; 0x188c <TIMERx_setTimerMode+0x162>
    185a:	20 c0       	rjmp	.+64     	; 0x189c <TIMERx_setTimerMode+0x172>
    185c:	83 b7       	in	r24, 0x33	; 51
    185e:	8f 7e       	andi	r24, 0xEF	; 239
    1860:	83 bf       	out	0x33, r24	; 51
    1862:	83 b7       	in	r24, 0x33	; 51
    1864:	8f 7d       	andi	r24, 0xDF	; 223
    1866:	83 bf       	out	0x33, r24	; 51
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	19 c0       	rjmp	.+50     	; 0x189e <TIMERx_setTimerMode+0x174>
    186c:	83 b7       	in	r24, 0x33	; 51
    186e:	80 61       	ori	r24, 0x10	; 16
    1870:	83 bf       	out	0x33, r24	; 51
    1872:	83 b7       	in	r24, 0x33	; 51
    1874:	8f 7d       	andi	r24, 0xDF	; 223
    1876:	83 bf       	out	0x33, r24	; 51
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	11 c0       	rjmp	.+34     	; 0x189e <TIMERx_setTimerMode+0x174>
    187c:	83 b7       	in	r24, 0x33	; 51
    187e:	8f 7e       	andi	r24, 0xEF	; 239
    1880:	83 bf       	out	0x33, r24	; 51
    1882:	83 b7       	in	r24, 0x33	; 51
    1884:	80 62       	ori	r24, 0x20	; 32
    1886:	83 bf       	out	0x33, r24	; 51
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	09 c0       	rjmp	.+18     	; 0x189e <TIMERx_setTimerMode+0x174>
    188c:	83 b7       	in	r24, 0x33	; 51
    188e:	80 61       	ori	r24, 0x10	; 16
    1890:	83 bf       	out	0x33, r24	; 51
    1892:	83 b7       	in	r24, 0x33	; 51
    1894:	80 62       	ori	r24, 0x20	; 32
    1896:	83 bf       	out	0x33, r24	; 51
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	01 c0       	rjmp	.+2      	; 0x189e <TIMERx_setTimerMode+0x174>
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 85       	ldd	r25, Z+8	; 0x08
    18a0:	9c bf       	out	0x3c, r25	; 60
    18a2:	99 b7       	in	r25, 0x39	; 57
    18a4:	92 60       	ori	r25, 0x02	; 2
    18a6:	99 bf       	out	0x39, r25	; 57
    18a8:	08 95       	ret
    18aa:	91 30       	cpi	r25, 0x01	; 1
    18ac:	59 f1       	breq	.+86     	; 0x1904 <TIMERx_setTimerMode+0x1da>
    18ae:	38 f0       	brcs	.+14     	; 0x18be <TIMERx_setTimerMode+0x194>
    18b0:	92 30       	cpi	r25, 0x02	; 2
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <TIMERx_setTimerMode+0x18c>
    18b4:	cd c0       	rjmp	.+410    	; 0x1a50 <TIMERx_setTimerMode+0x326>
    18b6:	93 30       	cpi	r25, 0x03	; 3
    18b8:	09 f4       	brne	.+2      	; 0x18bc <TIMERx_setTimerMode+0x192>
    18ba:	77 c0       	rjmp	.+238    	; 0x19aa <TIMERx_setTimerMode+0x280>
    18bc:	d9 c1       	rjmp	.+946    	; 0x1c70 <TIMERx_setTimerMode+0x546>
    18be:	8f b5       	in	r24, 0x2f	; 47
    18c0:	88 60       	ori	r24, 0x08	; 8
    18c2:	8f bd       	out	0x2f, r24	; 47
    18c4:	8f b5       	in	r24, 0x2f	; 47
    18c6:	84 60       	ori	r24, 0x04	; 4
    18c8:	8f bd       	out	0x2f, r24	; 47
    18ca:	8f b5       	in	r24, 0x2f	; 47
    18cc:	8e 7f       	andi	r24, 0xFE	; 254
    18ce:	8f bd       	out	0x2f, r24	; 47
    18d0:	8f b5       	in	r24, 0x2f	; 47
    18d2:	8d 7f       	andi	r24, 0xFD	; 253
    18d4:	8f bd       	out	0x2f, r24	; 47
    18d6:	8e b5       	in	r24, 0x2e	; 46
    18d8:	8f 7e       	andi	r24, 0xEF	; 239
    18da:	8e bd       	out	0x2e, r24	; 46
    18dc:	8e b5       	in	r24, 0x2e	; 46
    18de:	87 7f       	andi	r24, 0xF7	; 247
    18e0:	8e bd       	out	0x2e, r24	; 46
    18e2:	8f b5       	in	r24, 0x2f	; 47
    18e4:	8f 7b       	andi	r24, 0xBF	; 191
    18e6:	8f bd       	out	0x2f, r24	; 47
    18e8:	8f b5       	in	r24, 0x2f	; 47
    18ea:	8f 77       	andi	r24, 0x7F	; 127
    18ec:	8f bd       	out	0x2f, r24	; 47
    18ee:	8f b5       	in	r24, 0x2f	; 47
    18f0:	8f 7e       	andi	r24, 0xEF	; 239
    18f2:	8f bd       	out	0x2f, r24	; 47
    18f4:	8f b5       	in	r24, 0x2f	; 47
    18f6:	8f 7d       	andi	r24, 0xDF	; 223
    18f8:	8f bd       	out	0x2f, r24	; 47
    18fa:	89 b7       	in	r24, 0x39	; 57
    18fc:	84 60       	ori	r24, 0x04	; 4
    18fe:	89 bf       	out	0x39, r24	; 57
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	08 95       	ret
    1904:	8f b5       	in	r24, 0x2f	; 47
    1906:	81 60       	ori	r24, 0x01	; 1
    1908:	8f bd       	out	0x2f, r24	; 47
    190a:	8f b5       	in	r24, 0x2f	; 47
    190c:	8d 7f       	andi	r24, 0xFD	; 253
    190e:	8f bd       	out	0x2f, r24	; 47
    1910:	8e b5       	in	r24, 0x2e	; 46
    1912:	8f 7e       	andi	r24, 0xEF	; 239
    1914:	8e bd       	out	0x2e, r24	; 46
    1916:	8e b5       	in	r24, 0x2e	; 46
    1918:	87 7f       	andi	r24, 0xF7	; 247
    191a:	8e bd       	out	0x2e, r24	; 46
    191c:	85 81       	ldd	r24, Z+5	; 0x05
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	a1 f0       	breq	.+40     	; 0x194a <TIMERx_setTimerMode+0x220>
    1922:	28 f0       	brcs	.+10     	; 0x192e <TIMERx_setTimerMode+0x204>
    1924:	82 30       	cpi	r24, 0x02	; 2
    1926:	f9 f0       	breq	.+62     	; 0x1966 <TIMERx_setTimerMode+0x23c>
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	59 f1       	breq	.+86     	; 0x1982 <TIMERx_setTimerMode+0x258>
    192c:	38 c0       	rjmp	.+112    	; 0x199e <TIMERx_setTimerMode+0x274>
    192e:	8f b5       	in	r24, 0x2f	; 47
    1930:	8f 7b       	andi	r24, 0xBF	; 191
    1932:	8f bd       	out	0x2f, r24	; 47
    1934:	8f b5       	in	r24, 0x2f	; 47
    1936:	8f 77       	andi	r24, 0x7F	; 127
    1938:	8f bd       	out	0x2f, r24	; 47
    193a:	8f b5       	in	r24, 0x2f	; 47
    193c:	8f 7e       	andi	r24, 0xEF	; 239
    193e:	8f bd       	out	0x2f, r24	; 47
    1940:	8f b5       	in	r24, 0x2f	; 47
    1942:	8f 7d       	andi	r24, 0xDF	; 223
    1944:	8f bd       	out	0x2f, r24	; 47
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	2b c0       	rjmp	.+86     	; 0x19a0 <TIMERx_setTimerMode+0x276>
    194a:	8f b5       	in	r24, 0x2f	; 47
    194c:	80 64       	ori	r24, 0x40	; 64
    194e:	8f bd       	out	0x2f, r24	; 47
    1950:	8f b5       	in	r24, 0x2f	; 47
    1952:	8f 77       	andi	r24, 0x7F	; 127
    1954:	8f bd       	out	0x2f, r24	; 47
    1956:	8f b5       	in	r24, 0x2f	; 47
    1958:	80 61       	ori	r24, 0x10	; 16
    195a:	8f bd       	out	0x2f, r24	; 47
    195c:	8f b5       	in	r24, 0x2f	; 47
    195e:	8f 7d       	andi	r24, 0xDF	; 223
    1960:	8f bd       	out	0x2f, r24	; 47
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	1d c0       	rjmp	.+58     	; 0x19a0 <TIMERx_setTimerMode+0x276>
    1966:	8f b5       	in	r24, 0x2f	; 47
    1968:	8f 7b       	andi	r24, 0xBF	; 191
    196a:	8f bd       	out	0x2f, r24	; 47
    196c:	8f b5       	in	r24, 0x2f	; 47
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	8f bd       	out	0x2f, r24	; 47
    1972:	8f b5       	in	r24, 0x2f	; 47
    1974:	8f 7e       	andi	r24, 0xEF	; 239
    1976:	8f bd       	out	0x2f, r24	; 47
    1978:	8f b5       	in	r24, 0x2f	; 47
    197a:	80 62       	ori	r24, 0x20	; 32
    197c:	8f bd       	out	0x2f, r24	; 47
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <TIMERx_setTimerMode+0x276>
    1982:	8f b5       	in	r24, 0x2f	; 47
    1984:	80 64       	ori	r24, 0x40	; 64
    1986:	8f bd       	out	0x2f, r24	; 47
    1988:	8f b5       	in	r24, 0x2f	; 47
    198a:	80 68       	ori	r24, 0x80	; 128
    198c:	8f bd       	out	0x2f, r24	; 47
    198e:	8f b5       	in	r24, 0x2f	; 47
    1990:	80 61       	ori	r24, 0x10	; 16
    1992:	8f bd       	out	0x2f, r24	; 47
    1994:	8f b5       	in	r24, 0x2f	; 47
    1996:	80 62       	ori	r24, 0x20	; 32
    1998:	8f bd       	out	0x2f, r24	; 47
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <TIMERx_setTimerMode+0x276>
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 85       	ldd	r25, Z+8	; 0x08
    19a2:	9a bd       	out	0x2a, r25	; 42
    19a4:	91 85       	ldd	r25, Z+9	; 0x09
    19a6:	9b bd       	out	0x2b, r25	; 43
    19a8:	08 95       	ret
    19aa:	8f b5       	in	r24, 0x2f	; 47
    19ac:	81 60       	ori	r24, 0x01	; 1
    19ae:	8f bd       	out	0x2f, r24	; 47
    19b0:	8f b5       	in	r24, 0x2f	; 47
    19b2:	8d 7f       	andi	r24, 0xFD	; 253
    19b4:	8f bd       	out	0x2f, r24	; 47
    19b6:	8e b5       	in	r24, 0x2e	; 46
    19b8:	80 61       	ori	r24, 0x10	; 16
    19ba:	8e bd       	out	0x2e, r24	; 46
    19bc:	8e b5       	in	r24, 0x2e	; 46
    19be:	87 7f       	andi	r24, 0xF7	; 247
    19c0:	8e bd       	out	0x2e, r24	; 46
    19c2:	84 81       	ldd	r24, Z+4	; 0x04
    19c4:	81 11       	cpse	r24, r1
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <TIMERx_setTimerMode+0x2ba>
    19c8:	8f b5       	in	r24, 0x2f	; 47
    19ca:	8f 7b       	andi	r24, 0xBF	; 191
    19cc:	8f bd       	out	0x2f, r24	; 47
    19ce:	8f b5       	in	r24, 0x2f	; 47
    19d0:	8f 77       	andi	r24, 0x7F	; 127
    19d2:	8f bd       	out	0x2f, r24	; 47
    19d4:	8f b5       	in	r24, 0x2f	; 47
    19d6:	8f 7e       	andi	r24, 0xEF	; 239
    19d8:	8f bd       	out	0x2f, r24	; 47
    19da:	8f b5       	in	r24, 0x2f	; 47
    19dc:	8f 7d       	andi	r24, 0xDF	; 223
    19de:	8f bd       	out	0x2f, r24	; 47
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	31 c0       	rjmp	.+98     	; 0x1a46 <TIMERx_setTimerMode+0x31c>
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	71 f4       	brne	.+28     	; 0x1a04 <TIMERx_setTimerMode+0x2da>
    19e8:	8f b5       	in	r24, 0x2f	; 47
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	8f bd       	out	0x2f, r24	; 47
    19ee:	8f b5       	in	r24, 0x2f	; 47
    19f0:	8f 77       	andi	r24, 0x7F	; 127
    19f2:	8f bd       	out	0x2f, r24	; 47
    19f4:	8f b5       	in	r24, 0x2f	; 47
    19f6:	80 61       	ori	r24, 0x10	; 16
    19f8:	8f bd       	out	0x2f, r24	; 47
    19fa:	8f b5       	in	r24, 0x2f	; 47
    19fc:	8f 7d       	andi	r24, 0xDF	; 223
    19fe:	8f bd       	out	0x2f, r24	; 47
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	21 c0       	rjmp	.+66     	; 0x1a46 <TIMERx_setTimerMode+0x31c>
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	71 f4       	brne	.+28     	; 0x1a24 <TIMERx_setTimerMode+0x2fa>
    1a08:	8f b5       	in	r24, 0x2f	; 47
    1a0a:	8f 7b       	andi	r24, 0xBF	; 191
    1a0c:	8f bd       	out	0x2f, r24	; 47
    1a0e:	8f b5       	in	r24, 0x2f	; 47
    1a10:	80 68       	ori	r24, 0x80	; 128
    1a12:	8f bd       	out	0x2f, r24	; 47
    1a14:	8f b5       	in	r24, 0x2f	; 47
    1a16:	8f 7e       	andi	r24, 0xEF	; 239
    1a18:	8f bd       	out	0x2f, r24	; 47
    1a1a:	8f b5       	in	r24, 0x2f	; 47
    1a1c:	80 62       	ori	r24, 0x20	; 32
    1a1e:	8f bd       	out	0x2f, r24	; 47
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	11 c0       	rjmp	.+34     	; 0x1a46 <TIMERx_setTimerMode+0x31c>
    1a24:	83 30       	cpi	r24, 0x03	; 3
    1a26:	71 f4       	brne	.+28     	; 0x1a44 <TIMERx_setTimerMode+0x31a>
    1a28:	8f b5       	in	r24, 0x2f	; 47
    1a2a:	80 64       	ori	r24, 0x40	; 64
    1a2c:	8f bd       	out	0x2f, r24	; 47
    1a2e:	8f b5       	in	r24, 0x2f	; 47
    1a30:	80 68       	ori	r24, 0x80	; 128
    1a32:	8f bd       	out	0x2f, r24	; 47
    1a34:	8f b5       	in	r24, 0x2f	; 47
    1a36:	80 61       	ori	r24, 0x10	; 16
    1a38:	8f bd       	out	0x2f, r24	; 47
    1a3a:	8f b5       	in	r24, 0x2f	; 47
    1a3c:	80 62       	ori	r24, 0x20	; 32
    1a3e:	8f bd       	out	0x2f, r24	; 47
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <TIMERx_setTimerMode+0x31c>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 85       	ldd	r25, Z+8	; 0x08
    1a48:	9a bd       	out	0x2a, r25	; 42
    1a4a:	91 85       	ldd	r25, Z+9	; 0x09
    1a4c:	9b bd       	out	0x2b, r25	; 43
    1a4e:	08 95       	ret
    1a50:	8f b5       	in	r24, 0x2f	; 47
    1a52:	88 60       	ori	r24, 0x08	; 8
    1a54:	8f bd       	out	0x2f, r24	; 47
    1a56:	8f b5       	in	r24, 0x2f	; 47
    1a58:	84 60       	ori	r24, 0x04	; 4
    1a5a:	8f bd       	out	0x2f, r24	; 47
    1a5c:	8f b5       	in	r24, 0x2f	; 47
    1a5e:	8e 7f       	andi	r24, 0xFE	; 254
    1a60:	8f bd       	out	0x2f, r24	; 47
    1a62:	8f b5       	in	r24, 0x2f	; 47
    1a64:	8d 7f       	andi	r24, 0xFD	; 253
    1a66:	8f bd       	out	0x2f, r24	; 47
    1a68:	8e b5       	in	r24, 0x2e	; 46
    1a6a:	80 61       	ori	r24, 0x10	; 16
    1a6c:	8e bd       	out	0x2e, r24	; 46
    1a6e:	8e b5       	in	r24, 0x2e	; 46
    1a70:	87 7f       	andi	r24, 0xF7	; 247
    1a72:	8e bd       	out	0x2e, r24	; 46
    1a74:	83 81       	ldd	r24, Z+3	; 0x03
    1a76:	81 11       	cpse	r24, r1
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <TIMERx_setTimerMode+0x36c>
    1a7a:	8f b5       	in	r24, 0x2f	; 47
    1a7c:	8f 7b       	andi	r24, 0xBF	; 191
    1a7e:	8f bd       	out	0x2f, r24	; 47
    1a80:	8f b5       	in	r24, 0x2f	; 47
    1a82:	8f 77       	andi	r24, 0x7F	; 127
    1a84:	8f bd       	out	0x2f, r24	; 47
    1a86:	8f b5       	in	r24, 0x2f	; 47
    1a88:	8f 7e       	andi	r24, 0xEF	; 239
    1a8a:	8f bd       	out	0x2f, r24	; 47
    1a8c:	8f b5       	in	r24, 0x2f	; 47
    1a8e:	8f 7d       	andi	r24, 0xDF	; 223
    1a90:	8f bd       	out	0x2f, r24	; 47
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	31 c0       	rjmp	.+98     	; 0x1af8 <TIMERx_setTimerMode+0x3ce>
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	71 f4       	brne	.+28     	; 0x1ab6 <TIMERx_setTimerMode+0x38c>
    1a9a:	8f b5       	in	r24, 0x2f	; 47
    1a9c:	80 64       	ori	r24, 0x40	; 64
    1a9e:	8f bd       	out	0x2f, r24	; 47
    1aa0:	8f b5       	in	r24, 0x2f	; 47
    1aa2:	8f 77       	andi	r24, 0x7F	; 127
    1aa4:	8f bd       	out	0x2f, r24	; 47
    1aa6:	8f b5       	in	r24, 0x2f	; 47
    1aa8:	80 61       	ori	r24, 0x10	; 16
    1aaa:	8f bd       	out	0x2f, r24	; 47
    1aac:	8f b5       	in	r24, 0x2f	; 47
    1aae:	8f 7d       	andi	r24, 0xDF	; 223
    1ab0:	8f bd       	out	0x2f, r24	; 47
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	21 c0       	rjmp	.+66     	; 0x1af8 <TIMERx_setTimerMode+0x3ce>
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	71 f4       	brne	.+28     	; 0x1ad6 <TIMERx_setTimerMode+0x3ac>
    1aba:	8f b5       	in	r24, 0x2f	; 47
    1abc:	8f 7b       	andi	r24, 0xBF	; 191
    1abe:	8f bd       	out	0x2f, r24	; 47
    1ac0:	8f b5       	in	r24, 0x2f	; 47
    1ac2:	80 68       	ori	r24, 0x80	; 128
    1ac4:	8f bd       	out	0x2f, r24	; 47
    1ac6:	8f b5       	in	r24, 0x2f	; 47
    1ac8:	8f 7e       	andi	r24, 0xEF	; 239
    1aca:	8f bd       	out	0x2f, r24	; 47
    1acc:	8f b5       	in	r24, 0x2f	; 47
    1ace:	80 62       	ori	r24, 0x20	; 32
    1ad0:	8f bd       	out	0x2f, r24	; 47
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	11 c0       	rjmp	.+34     	; 0x1af8 <TIMERx_setTimerMode+0x3ce>
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	71 f4       	brne	.+28     	; 0x1af6 <TIMERx_setTimerMode+0x3cc>
    1ada:	8f b5       	in	r24, 0x2f	; 47
    1adc:	80 64       	ori	r24, 0x40	; 64
    1ade:	8f bd       	out	0x2f, r24	; 47
    1ae0:	8f b5       	in	r24, 0x2f	; 47
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	8f bd       	out	0x2f, r24	; 47
    1ae6:	8f b5       	in	r24, 0x2f	; 47
    1ae8:	80 61       	ori	r24, 0x10	; 16
    1aea:	8f bd       	out	0x2f, r24	; 47
    1aec:	8f b5       	in	r24, 0x2f	; 47
    1aee:	80 62       	ori	r24, 0x20	; 32
    1af0:	8f bd       	out	0x2f, r24	; 47
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <TIMERx_setTimerMode+0x3ce>
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 85       	ldd	r25, Z+8	; 0x08
    1afa:	9a bd       	out	0x2a, r25	; 42
    1afc:	91 85       	ldd	r25, Z+9	; 0x09
    1afe:	9b bd       	out	0x2b, r25	; 43
    1b00:	99 b7       	in	r25, 0x39	; 57
    1b02:	90 61       	ori	r25, 0x10	; 16
    1b04:	99 bf       	out	0x39, r25	; 57
    1b06:	08 95       	ret
    1b08:	91 30       	cpi	r25, 0x01	; 1
    1b0a:	d9 f0       	breq	.+54     	; 0x1b42 <TIMERx_setTimerMode+0x418>
    1b0c:	30 f0       	brcs	.+12     	; 0x1b1a <TIMERx_setTimerMode+0x3f0>
    1b0e:	92 30       	cpi	r25, 0x02	; 2
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <TIMERx_setTimerMode+0x3ea>
    1b12:	69 c0       	rjmp	.+210    	; 0x1be6 <TIMERx_setTimerMode+0x4bc>
    1b14:	93 30       	cpi	r25, 0x03	; 3
    1b16:	f1 f1       	breq	.+124    	; 0x1b94 <TIMERx_setTimerMode+0x46a>
    1b18:	ad c0       	rjmp	.+346    	; 0x1c74 <TIMERx_setTimerMode+0x54a>
    1b1a:	85 b5       	in	r24, 0x25	; 37
    1b1c:	80 68       	ori	r24, 0x80	; 128
    1b1e:	85 bd       	out	0x25, r24	; 37
    1b20:	85 b5       	in	r24, 0x25	; 37
    1b22:	8f 7b       	andi	r24, 0xBF	; 191
    1b24:	85 bd       	out	0x25, r24	; 37
    1b26:	85 b5       	in	r24, 0x25	; 37
    1b28:	87 7f       	andi	r24, 0xF7	; 247
    1b2a:	85 bd       	out	0x25, r24	; 37
    1b2c:	85 b5       	in	r24, 0x25	; 37
    1b2e:	8f 7e       	andi	r24, 0xEF	; 239
    1b30:	85 bd       	out	0x25, r24	; 37
    1b32:	85 b5       	in	r24, 0x25	; 37
    1b34:	8f 7d       	andi	r24, 0xDF	; 223
    1b36:	85 bd       	out	0x25, r24	; 37
    1b38:	89 b7       	in	r24, 0x39	; 57
    1b3a:	80 64       	ori	r24, 0x40	; 64
    1b3c:	89 bf       	out	0x39, r24	; 57
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	08 95       	ret
    1b42:	85 b5       	in	r24, 0x25	; 37
    1b44:	80 64       	ori	r24, 0x40	; 64
    1b46:	85 bd       	out	0x25, r24	; 37
    1b48:	85 b5       	in	r24, 0x25	; 37
    1b4a:	87 7f       	andi	r24, 0xF7	; 247
    1b4c:	85 bd       	out	0x25, r24	; 37
    1b4e:	85 81       	ldd	r24, Z+5	; 0x05
    1b50:	81 11       	cpse	r24, r1
    1b52:	08 c0       	rjmp	.+16     	; 0x1b64 <TIMERx_setTimerMode+0x43a>
    1b54:	85 b5       	in	r24, 0x25	; 37
    1b56:	8f 7e       	andi	r24, 0xEF	; 239
    1b58:	85 bd       	out	0x25, r24	; 37
    1b5a:	85 b5       	in	r24, 0x25	; 37
    1b5c:	8f 7d       	andi	r24, 0xDF	; 223
    1b5e:	85 bd       	out	0x25, r24	; 37
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	15 c0       	rjmp	.+42     	; 0x1b8e <TIMERx_setTimerMode+0x464>
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	41 f4       	brne	.+16     	; 0x1b78 <TIMERx_setTimerMode+0x44e>
    1b68:	85 b5       	in	r24, 0x25	; 37
    1b6a:	8f 7e       	andi	r24, 0xEF	; 239
    1b6c:	85 bd       	out	0x25, r24	; 37
    1b6e:	85 b5       	in	r24, 0x25	; 37
    1b70:	80 62       	ori	r24, 0x20	; 32
    1b72:	85 bd       	out	0x25, r24	; 37
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	0b c0       	rjmp	.+22     	; 0x1b8e <TIMERx_setTimerMode+0x464>
    1b78:	83 30       	cpi	r24, 0x03	; 3
    1b7a:	41 f4       	brne	.+16     	; 0x1b8c <TIMERx_setTimerMode+0x462>
    1b7c:	85 b5       	in	r24, 0x25	; 37
    1b7e:	80 61       	ori	r24, 0x10	; 16
    1b80:	85 bd       	out	0x25, r24	; 37
    1b82:	85 b5       	in	r24, 0x25	; 37
    1b84:	80 62       	ori	r24, 0x20	; 32
    1b86:	85 bd       	out	0x25, r24	; 37
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <TIMERx_setTimerMode+0x464>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 85       	ldd	r25, Z+8	; 0x08
    1b90:	93 bd       	out	0x23, r25	; 35
    1b92:	08 95       	ret
    1b94:	85 b5       	in	r24, 0x25	; 37
    1b96:	80 64       	ori	r24, 0x40	; 64
    1b98:	85 bd       	out	0x25, r24	; 37
    1b9a:	85 b5       	in	r24, 0x25	; 37
    1b9c:	88 60       	ori	r24, 0x08	; 8
    1b9e:	85 bd       	out	0x25, r24	; 37
    1ba0:	84 81       	ldd	r24, Z+4	; 0x04
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <TIMERx_setTimerMode+0x48c>
    1ba6:	85 b5       	in	r24, 0x25	; 37
    1ba8:	8f 7e       	andi	r24, 0xEF	; 239
    1baa:	85 bd       	out	0x25, r24	; 37
    1bac:	85 b5       	in	r24, 0x25	; 37
    1bae:	8f 7d       	andi	r24, 0xDF	; 223
    1bb0:	85 bd       	out	0x25, r24	; 37
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	15 c0       	rjmp	.+42     	; 0x1be0 <TIMERx_setTimerMode+0x4b6>
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	41 f4       	brne	.+16     	; 0x1bca <TIMERx_setTimerMode+0x4a0>
    1bba:	85 b5       	in	r24, 0x25	; 37
    1bbc:	8f 7e       	andi	r24, 0xEF	; 239
    1bbe:	85 bd       	out	0x25, r24	; 37
    1bc0:	85 b5       	in	r24, 0x25	; 37
    1bc2:	80 62       	ori	r24, 0x20	; 32
    1bc4:	85 bd       	out	0x25, r24	; 37
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	0b c0       	rjmp	.+22     	; 0x1be0 <TIMERx_setTimerMode+0x4b6>
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	41 f4       	brne	.+16     	; 0x1bde <TIMERx_setTimerMode+0x4b4>
    1bce:	85 b5       	in	r24, 0x25	; 37
    1bd0:	80 61       	ori	r24, 0x10	; 16
    1bd2:	85 bd       	out	0x25, r24	; 37
    1bd4:	85 b5       	in	r24, 0x25	; 37
    1bd6:	80 62       	ori	r24, 0x20	; 32
    1bd8:	85 bd       	out	0x25, r24	; 37
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <TIMERx_setTimerMode+0x4b6>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 85       	ldd	r25, Z+8	; 0x08
    1be2:	93 bd       	out	0x23, r25	; 35
    1be4:	08 95       	ret
    1be6:	85 b5       	in	r24, 0x25	; 37
    1be8:	80 68       	ori	r24, 0x80	; 128
    1bea:	85 bd       	out	0x25, r24	; 37
    1bec:	85 b5       	in	r24, 0x25	; 37
    1bee:	8f 7b       	andi	r24, 0xBF	; 191
    1bf0:	85 bd       	out	0x25, r24	; 37
    1bf2:	85 b5       	in	r24, 0x25	; 37
    1bf4:	88 60       	ori	r24, 0x08	; 8
    1bf6:	85 bd       	out	0x25, r24	; 37
    1bf8:	83 81       	ldd	r24, Z+3	; 0x03
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <TIMERx_setTimerMode+0x4e4>
    1bfe:	85 b5       	in	r24, 0x25	; 37
    1c00:	8f 7e       	andi	r24, 0xEF	; 239
    1c02:	85 bd       	out	0x25, r24	; 37
    1c04:	85 b5       	in	r24, 0x25	; 37
    1c06:	8f 7d       	andi	r24, 0xDF	; 223
    1c08:	85 bd       	out	0x25, r24	; 37
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	1f c0       	rjmp	.+62     	; 0x1c4c <TIMERx_setTimerMode+0x522>
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	41 f4       	brne	.+16     	; 0x1c22 <TIMERx_setTimerMode+0x4f8>
    1c12:	85 b5       	in	r24, 0x25	; 37
    1c14:	80 61       	ori	r24, 0x10	; 16
    1c16:	85 bd       	out	0x25, r24	; 37
    1c18:	85 b5       	in	r24, 0x25	; 37
    1c1a:	8f 7d       	andi	r24, 0xDF	; 223
    1c1c:	85 bd       	out	0x25, r24	; 37
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	15 c0       	rjmp	.+42     	; 0x1c4c <TIMERx_setTimerMode+0x522>
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	41 f4       	brne	.+16     	; 0x1c36 <TIMERx_setTimerMode+0x50c>
    1c26:	85 b5       	in	r24, 0x25	; 37
    1c28:	8f 7e       	andi	r24, 0xEF	; 239
    1c2a:	85 bd       	out	0x25, r24	; 37
    1c2c:	85 b5       	in	r24, 0x25	; 37
    1c2e:	80 62       	ori	r24, 0x20	; 32
    1c30:	85 bd       	out	0x25, r24	; 37
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	0b c0       	rjmp	.+22     	; 0x1c4c <TIMERx_setTimerMode+0x522>
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	41 f4       	brne	.+16     	; 0x1c4a <TIMERx_setTimerMode+0x520>
    1c3a:	85 b5       	in	r24, 0x25	; 37
    1c3c:	80 61       	ori	r24, 0x10	; 16
    1c3e:	85 bd       	out	0x25, r24	; 37
    1c40:	85 b5       	in	r24, 0x25	; 37
    1c42:	80 62       	ori	r24, 0x20	; 32
    1c44:	85 bd       	out	0x25, r24	; 37
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	01 c0       	rjmp	.+2      	; 0x1c4c <TIMERx_setTimerMode+0x522>
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 85       	ldd	r25, Z+8	; 0x08
    1c4e:	93 bd       	out	0x23, r25	; 35
    1c50:	99 b7       	in	r25, 0x39	; 57
    1c52:	90 68       	ori	r25, 0x80	; 128
    1c54:	99 bf       	out	0x39, r25	; 57
    1c56:	08 95       	ret
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	08 95       	ret
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	08 95       	ret
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	08 95       	ret
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	08 95       	ret
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	08 95       	ret
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	08 95       	ret
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	08 95       	ret
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	08 95       	ret

00001c78 <__vector_9>:
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_Timer1_callBackPtr>
    1c9e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_Timer1_callBackPtr+0x1>
    1ca2:	89 2b       	or	r24, r25
    1ca4:	41 f0       	breq	.+16     	; 0x1cb6 <__vector_9+0x3e>
    1ca6:	88 b7       	in	r24, 0x38	; 56
    1ca8:	8b 7f       	andi	r24, 0xFB	; 251
    1caa:	88 bf       	out	0x38, r24	; 56
    1cac:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <g_Timer1_callBackPtr>
    1cb0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <g_Timer1_callBackPtr+0x1>
    1cb4:	09 95       	icall
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_11>:
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
    1cfa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_Timer0_callBackPtr>
    1cfe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_Timer0_callBackPtr+0x1>
    1d02:	89 2b       	or	r24, r25
    1d04:	41 f0       	breq	.+16     	; 0x1d16 <__vector_11+0x3e>
    1d06:	88 b7       	in	r24, 0x38	; 56
    1d08:	8e 7f       	andi	r24, 0xFE	; 254
    1d0a:	88 bf       	out	0x38, r24	; 56
    1d0c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <g_Timer0_callBackPtr>
    1d10:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <g_Timer0_callBackPtr+0x1>
    1d14:	09 95       	icall
    1d16:	ff 91       	pop	r31
    1d18:	ef 91       	pop	r30
    1d1a:	bf 91       	pop	r27
    1d1c:	af 91       	pop	r26
    1d1e:	9f 91       	pop	r25
    1d20:	8f 91       	pop	r24
    1d22:	7f 91       	pop	r23
    1d24:	6f 91       	pop	r22
    1d26:	5f 91       	pop	r21
    1d28:	4f 91       	pop	r20
    1d2a:	3f 91       	pop	r19
    1d2c:	2f 91       	pop	r18
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	0f 90       	pop	r0
    1d34:	1f 90       	pop	r1
    1d36:	18 95       	reti

00001d38 <TIMERx_setCallBack>:
    1d38:	63 30       	cpi	r22, 0x03	; 3
    1d3a:	a8 f4       	brcc	.+42     	; 0x1d66 <TIMERx_setCallBack+0x2e>
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	a9 f0       	breq	.+42     	; 0x1d6a <TIMERx_setCallBack+0x32>
    1d40:	61 30       	cpi	r22, 0x01	; 1
    1d42:	59 f0       	breq	.+22     	; 0x1d5a <TIMERx_setCallBack+0x22>
    1d44:	20 f0       	brcs	.+8      	; 0x1d4e <TIMERx_setCallBack+0x16>
    1d46:	62 30       	cpi	r22, 0x02	; 2
    1d48:	91 f0       	breq	.+36     	; 0x1d6e <TIMERx_setCallBack+0x36>
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	08 95       	ret
    1d4e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_Timer0_callBackPtr+0x1>
    1d52:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_Timer0_callBackPtr>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	08 95       	ret
    1d5a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_Timer1_callBackPtr+0x1>
    1d5e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_Timer1_callBackPtr>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	08 95       	ret
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	08 95       	ret
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	08 95       	ret
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	08 95       	ret

00001d72 <TIMERx_init>:
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	99 f1       	breq	.+102    	; 0x1ddc <TIMERx_init+0x6a>
    1d76:	fc 01       	movw	r30, r24
    1d78:	20 81       	ld	r18, Z
    1d7a:	23 30       	cpi	r18, 0x03	; 3
    1d7c:	88 f5       	brcc	.+98     	; 0x1de0 <TIMERx_init+0x6e>
    1d7e:	32 81       	ldd	r19, Z+2	; 0x02
    1d80:	34 30       	cpi	r19, 0x04	; 4
    1d82:	80 f5       	brcc	.+96     	; 0x1de4 <TIMERx_init+0x72>
    1d84:	33 81       	ldd	r19, Z+3	; 0x03
    1d86:	34 30       	cpi	r19, 0x04	; 4
    1d88:	78 f5       	brcc	.+94     	; 0x1de8 <TIMERx_init+0x76>
    1d8a:	34 81       	ldd	r19, Z+4	; 0x04
    1d8c:	34 30       	cpi	r19, 0x04	; 4
    1d8e:	70 f5       	brcc	.+92     	; 0x1dec <TIMERx_init+0x7a>
    1d90:	21 30       	cpi	r18, 0x01	; 1
    1d92:	69 f0       	breq	.+26     	; 0x1dae <TIMERx_init+0x3c>
    1d94:	18 f0       	brcs	.+6      	; 0x1d9c <TIMERx_init+0x2a>
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	c1 f0       	breq	.+48     	; 0x1dca <TIMERx_init+0x58>
    1d9a:	2a c0       	rjmp	.+84     	; 0x1df0 <TIMERx_init+0x7e>
    1d9c:	12 be       	out	0x32, r1	; 50
    1d9e:	13 be       	out	0x33, r1	; 51
    1da0:	1c be       	out	0x3c, r1	; 60
    1da2:	fc 01       	movw	r30, r24
    1da4:	26 81       	ldd	r18, Z+6	; 0x06
    1da6:	22 bf       	out	0x32, r18	; 50
    1da8:	0e 94 95 0b 	call	0x172a	; 0x172a <TIMERx_setTimerMode>
    1dac:	08 95       	ret
    1dae:	1c bc       	out	0x2c, r1	; 44
    1db0:	1d bc       	out	0x2d, r1	; 45
    1db2:	1f bc       	out	0x2f, r1	; 47
    1db4:	1e bc       	out	0x2e, r1	; 46
    1db6:	1b bc       	out	0x2b, r1	; 43
    1db8:	1a bc       	out	0x2a, r1	; 42
    1dba:	fc 01       	movw	r30, r24
    1dbc:	26 81       	ldd	r18, Z+6	; 0x06
    1dbe:	37 81       	ldd	r19, Z+7	; 0x07
    1dc0:	3d bd       	out	0x2d, r19	; 45
    1dc2:	2c bd       	out	0x2c, r18	; 44
    1dc4:	0e 94 95 0b 	call	0x172a	; 0x172a <TIMERx_setTimerMode>
    1dc8:	08 95       	ret
    1dca:	14 bc       	out	0x24, r1	; 36
    1dcc:	15 bc       	out	0x25, r1	; 37
    1dce:	13 bc       	out	0x23, r1	; 35
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	26 81       	ldd	r18, Z+6	; 0x06
    1dd4:	24 bd       	out	0x24, r18	; 36
    1dd6:	0e 94 95 0b 	call	0x172a	; 0x172a <TIMERx_setTimerMode>
    1dda:	08 95       	ret
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	08 95       	ret
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	08 95       	ret
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	08 95       	ret
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	08 95       	ret
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	08 95       	ret
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	08 95       	ret

00001df4 <TIMERx_start>:
    1df4:	8a 30       	cpi	r24, 0x0A	; 10
    1df6:	48 f4       	brcc	.+18     	; 0x1e0a <TIMERx_start+0x16>
    1df8:	63 30       	cpi	r22, 0x03	; 3
    1dfa:	48 f4       	brcc	.+18     	; 0x1e0e <TIMERx_start+0x1a>
    1dfc:	96 2f       	mov	r25, r22
    1dfe:	68 2f       	mov	r22, r24
    1e00:	78 94       	sei
    1e02:	89 2f       	mov	r24, r25
    1e04:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <TIMERx_selectClk>
    1e08:	08 95       	ret
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	08 95       	ret
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	08 95       	ret

00001e12 <TIMERx_setValue>:
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	80 f4       	brcc	.+32     	; 0x1e36 <TIMERx_setValue+0x24>
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	39 f0       	breq	.+14     	; 0x1e28 <TIMERx_setValue+0x16>
    1e1a:	18 f0       	brcs	.+6      	; 0x1e22 <TIMERx_setValue+0x10>
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	41 f0       	breq	.+16     	; 0x1e30 <TIMERx_setValue+0x1e>
    1e20:	0c c0       	rjmp	.+24     	; 0x1e3a <TIMERx_setValue+0x28>
    1e22:	62 bf       	out	0x32, r22	; 50
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	08 95       	ret
    1e28:	7d bd       	out	0x2d, r23	; 45
    1e2a:	6c bd       	out	0x2c, r22	; 44
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	08 95       	ret
    1e30:	64 bd       	out	0x24, r22	; 36
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	08 95       	ret
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	08 95       	ret
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	08 95       	ret

00001e3e <TIMERx_stop>:

timer_enu_return_state_t TIMERx_stop(const  timer_enu_timer_number_t copy_enu_timer_number)
{
	 timer_enu_return_state_t  enu_return_state =  TIMER_OK;
	if( (copy_enu_timer_number >= INVALID_TIMER_TYPE) )
    1e3e:	83 30       	cpi	r24, 0x03	; 3
    1e40:	38 f5       	brcc	.+78     	; 0x1e90 <TIMERx_stop+0x52>
	{
		 enu_return_state =  TIMER_NOT_OK;
	}
	else
	{
		switch(copy_enu_timer_number)
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	79 f0       	breq	.+30     	; 0x1e64 <TIMERx_stop+0x26>
    1e46:	18 f0       	brcs	.+6      	; 0x1e4e <TIMERx_stop+0x10>
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	b9 f0       	breq	.+46     	; 0x1e7a <TIMERx_stop+0x3c>
    1e4c:	23 c0       	rjmp	.+70     	; 0x1e94 <TIMERx_stop+0x56>
		{
			case TIMER_0:
				/*use no clock to halt TIMER_0*/
				CLEAR_BIT(TCCR0,CS00);
    1e4e:	83 b7       	in	r24, 0x33	; 51
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
    1e54:	83 b7       	in	r24, 0x33	; 51
    1e56:	8d 7f       	andi	r24, 0xFD	; 253
    1e58:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
    1e5a:	83 b7       	in	r24, 0x33	; 51
    1e5c:	8b 7f       	andi	r24, 0xFB	; 251
    1e5e:	83 bf       	out	0x33, r24	; 51
	return  enu_return_state;
}

timer_enu_return_state_t TIMERx_stop(const  timer_enu_timer_number_t copy_enu_timer_number)
{
	 timer_enu_return_state_t  enu_return_state =  TIMER_OK;
    1e60:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_0:
				/*use no clock to halt TIMER_0*/
				CLEAR_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
				break;
    1e62:	08 95       	ret
				
			case TIMER_1:
				/*use no clock to halt TIMER_1*/
				CLEAR_BIT(TCCR1B,CS10);
    1e64:	8e b5       	in	r24, 0x2e	; 46
    1e66:	8e 7f       	andi	r24, 0xFE	; 254
    1e68:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS11);
    1e6a:	8e b5       	in	r24, 0x2e	; 46
    1e6c:	8d 7f       	andi	r24, 0xFD	; 253
    1e6e:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS12);
    1e70:	8e b5       	in	r24, 0x2e	; 46
    1e72:	8b 7f       	andi	r24, 0xFB	; 251
    1e74:	8e bd       	out	0x2e, r24	; 46
	return  enu_return_state;
}

timer_enu_return_state_t TIMERx_stop(const  timer_enu_timer_number_t copy_enu_timer_number)
{
	 timer_enu_return_state_t  enu_return_state =  TIMER_OK;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_1:
				/*use no clock to halt TIMER_1*/
				CLEAR_BIT(TCCR1B,CS10);
				CLEAR_BIT(TCCR1B,CS11);
				CLEAR_BIT(TCCR1B,CS12);
				break;
    1e78:	08 95       	ret
				
			case TIMER_2:
				/*use no clock to halt TIMER_2*/
				CLEAR_BIT(TCCR2,CS20);
    1e7a:	85 b5       	in	r24, 0x25	; 37
    1e7c:	8b 7f       	andi	r24, 0xFB	; 251
    1e7e:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS21);
    1e80:	85 b5       	in	r24, 0x25	; 37
    1e82:	8d 7f       	andi	r24, 0xFD	; 253
    1e84:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS22);
    1e86:	85 b5       	in	r24, 0x25	; 37
    1e88:	8e 7f       	andi	r24, 0xFE	; 254
    1e8a:	85 bd       	out	0x25, r24	; 37
	return  enu_return_state;
}

timer_enu_return_state_t TIMERx_stop(const  timer_enu_timer_number_t copy_enu_timer_number)
{
	 timer_enu_return_state_t  enu_return_state =  TIMER_OK;
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_2:
				/*use no clock to halt TIMER_2*/
				CLEAR_BIT(TCCR2,CS20);
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
    1e8e:	08 95       	ret
timer_enu_return_state_t TIMERx_stop(const  timer_enu_timer_number_t copy_enu_timer_number)
{
	 timer_enu_return_state_t  enu_return_state =  TIMER_OK;
	if( (copy_enu_timer_number >= INVALID_TIMER_TYPE) )
	{
		 enu_return_state =  TIMER_NOT_OK;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	08 95       	ret
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
				
			default:
				 enu_return_state |=  TIMER_NOT_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}
	return  enu_return_state;
}
    1e96:	08 95       	ret

00001e98 <__cmpsf2>:
    1e98:	0e 94 2f 10 	call	0x205e	; 0x205e <__fp_cmp>
    1e9c:	08 f4       	brcc	.+2      	; 0x1ea0 <__cmpsf2+0x8>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	08 95       	ret

00001ea2 <__divsf3>:
    1ea2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__divsf3x>
    1ea6:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_round>
    1eaa:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__fp_pscB>
    1eae:	58 f0       	brcs	.+22     	; 0x1ec6 <__divsf3+0x24>
    1eb0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__fp_pscA>
    1eb4:	40 f0       	brcs	.+16     	; 0x1ec6 <__divsf3+0x24>
    1eb6:	29 f4       	brne	.+10     	; 0x1ec2 <__divsf3+0x20>
    1eb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eba:	29 f0       	breq	.+10     	; 0x1ec6 <__divsf3+0x24>
    1ebc:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_inf>
    1ec0:	51 11       	cpse	r21, r1
    1ec2:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__fp_szero>
    1ec6:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__fp_nan>

00001eca <__divsf3x>:
    1eca:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fp_split3>
    1ece:	68 f3       	brcs	.-38     	; 0x1eaa <__divsf3+0x8>

00001ed0 <__divsf3_pse>:
    1ed0:	99 23       	and	r25, r25
    1ed2:	b1 f3       	breq	.-20     	; 0x1ec0 <__divsf3+0x1e>
    1ed4:	55 23       	and	r21, r21
    1ed6:	91 f3       	breq	.-28     	; 0x1ebc <__divsf3+0x1a>
    1ed8:	95 1b       	sub	r25, r21
    1eda:	55 0b       	sbc	r21, r21
    1edc:	bb 27       	eor	r27, r27
    1ede:	aa 27       	eor	r26, r26
    1ee0:	62 17       	cp	r22, r18
    1ee2:	73 07       	cpc	r23, r19
    1ee4:	84 07       	cpc	r24, r20
    1ee6:	38 f0       	brcs	.+14     	; 0x1ef6 <__divsf3_pse+0x26>
    1ee8:	9f 5f       	subi	r25, 0xFF	; 255
    1eea:	5f 4f       	sbci	r21, 0xFF	; 255
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	44 1f       	adc	r20, r20
    1ef2:	aa 1f       	adc	r26, r26
    1ef4:	a9 f3       	breq	.-22     	; 0x1ee0 <__divsf3_pse+0x10>
    1ef6:	35 d0       	rcall	.+106    	; 0x1f62 <__divsf3_pse+0x92>
    1ef8:	0e 2e       	mov	r0, r30
    1efa:	3a f0       	brmi	.+14     	; 0x1f0a <__divsf3_pse+0x3a>
    1efc:	e0 e8       	ldi	r30, 0x80	; 128
    1efe:	32 d0       	rcall	.+100    	; 0x1f64 <__divsf3_pse+0x94>
    1f00:	91 50       	subi	r25, 0x01	; 1
    1f02:	50 40       	sbci	r21, 0x00	; 0
    1f04:	e6 95       	lsr	r30
    1f06:	00 1c       	adc	r0, r0
    1f08:	ca f7       	brpl	.-14     	; 0x1efc <__divsf3_pse+0x2c>
    1f0a:	2b d0       	rcall	.+86     	; 0x1f62 <__divsf3_pse+0x92>
    1f0c:	fe 2f       	mov	r31, r30
    1f0e:	29 d0       	rcall	.+82     	; 0x1f62 <__divsf3_pse+0x92>
    1f10:	66 0f       	add	r22, r22
    1f12:	77 1f       	adc	r23, r23
    1f14:	88 1f       	adc	r24, r24
    1f16:	bb 1f       	adc	r27, r27
    1f18:	26 17       	cp	r18, r22
    1f1a:	37 07       	cpc	r19, r23
    1f1c:	48 07       	cpc	r20, r24
    1f1e:	ab 07       	cpc	r26, r27
    1f20:	b0 e8       	ldi	r27, 0x80	; 128
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <__divsf3_pse+0x56>
    1f24:	bb 0b       	sbc	r27, r27
    1f26:	80 2d       	mov	r24, r0
    1f28:	bf 01       	movw	r22, r30
    1f2a:	ff 27       	eor	r31, r31
    1f2c:	93 58       	subi	r25, 0x83	; 131
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	3a f0       	brmi	.+14     	; 0x1f40 <__divsf3_pse+0x70>
    1f32:	9e 3f       	cpi	r25, 0xFE	; 254
    1f34:	51 05       	cpc	r21, r1
    1f36:	78 f0       	brcs	.+30     	; 0x1f56 <__divsf3_pse+0x86>
    1f38:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_inf>
    1f3c:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__fp_szero>
    1f40:	5f 3f       	cpi	r21, 0xFF	; 255
    1f42:	e4 f3       	brlt	.-8      	; 0x1f3c <__divsf3_pse+0x6c>
    1f44:	98 3e       	cpi	r25, 0xE8	; 232
    1f46:	d4 f3       	brlt	.-12     	; 0x1f3c <__divsf3_pse+0x6c>
    1f48:	86 95       	lsr	r24
    1f4a:	77 95       	ror	r23
    1f4c:	67 95       	ror	r22
    1f4e:	b7 95       	ror	r27
    1f50:	f7 95       	ror	r31
    1f52:	9f 5f       	subi	r25, 0xFF	; 255
    1f54:	c9 f7       	brne	.-14     	; 0x1f48 <__divsf3_pse+0x78>
    1f56:	88 0f       	add	r24, r24
    1f58:	91 1d       	adc	r25, r1
    1f5a:	96 95       	lsr	r25
    1f5c:	87 95       	ror	r24
    1f5e:	97 f9       	bld	r25, 7
    1f60:	08 95       	ret
    1f62:	e1 e0       	ldi	r30, 0x01	; 1
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	62 17       	cp	r22, r18
    1f6e:	73 07       	cpc	r23, r19
    1f70:	84 07       	cpc	r24, r20
    1f72:	ba 07       	cpc	r27, r26
    1f74:	20 f0       	brcs	.+8      	; 0x1f7e <__divsf3_pse+0xae>
    1f76:	62 1b       	sub	r22, r18
    1f78:	73 0b       	sbc	r23, r19
    1f7a:	84 0b       	sbc	r24, r20
    1f7c:	ba 0b       	sbc	r27, r26
    1f7e:	ee 1f       	adc	r30, r30
    1f80:	88 f7       	brcc	.-30     	; 0x1f64 <__divsf3_pse+0x94>
    1f82:	e0 95       	com	r30
    1f84:	08 95       	ret

00001f86 <__fixunssfsi>:
    1f86:	0e 94 83 10 	call	0x2106	; 0x2106 <__fp_splitA>
    1f8a:	88 f0       	brcs	.+34     	; 0x1fae <__fixunssfsi+0x28>
    1f8c:	9f 57       	subi	r25, 0x7F	; 127
    1f8e:	98 f0       	brcs	.+38     	; 0x1fb6 <__fixunssfsi+0x30>
    1f90:	b9 2f       	mov	r27, r25
    1f92:	99 27       	eor	r25, r25
    1f94:	b7 51       	subi	r27, 0x17	; 23
    1f96:	b0 f0       	brcs	.+44     	; 0x1fc4 <__fixunssfsi+0x3e>
    1f98:	e1 f0       	breq	.+56     	; 0x1fd2 <__fixunssfsi+0x4c>
    1f9a:	66 0f       	add	r22, r22
    1f9c:	77 1f       	adc	r23, r23
    1f9e:	88 1f       	adc	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	1a f0       	brmi	.+6      	; 0x1faa <__fixunssfsi+0x24>
    1fa4:	ba 95       	dec	r27
    1fa6:	c9 f7       	brne	.-14     	; 0x1f9a <__fixunssfsi+0x14>
    1fa8:	14 c0       	rjmp	.+40     	; 0x1fd2 <__fixunssfsi+0x4c>
    1faa:	b1 30       	cpi	r27, 0x01	; 1
    1fac:	91 f0       	breq	.+36     	; 0x1fd2 <__fixunssfsi+0x4c>
    1fae:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_zero>
    1fb2:	b1 e0       	ldi	r27, 0x01	; 1
    1fb4:	08 95       	ret
    1fb6:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__fp_zero>
    1fba:	67 2f       	mov	r22, r23
    1fbc:	78 2f       	mov	r23, r24
    1fbe:	88 27       	eor	r24, r24
    1fc0:	b8 5f       	subi	r27, 0xF8	; 248
    1fc2:	39 f0       	breq	.+14     	; 0x1fd2 <__fixunssfsi+0x4c>
    1fc4:	b9 3f       	cpi	r27, 0xF9	; 249
    1fc6:	cc f3       	brlt	.-14     	; 0x1fba <__fixunssfsi+0x34>
    1fc8:	86 95       	lsr	r24
    1fca:	77 95       	ror	r23
    1fcc:	67 95       	ror	r22
    1fce:	b3 95       	inc	r27
    1fd0:	d9 f7       	brne	.-10     	; 0x1fc8 <__fixunssfsi+0x42>
    1fd2:	3e f4       	brtc	.+14     	; 0x1fe2 <__fixunssfsi+0x5c>
    1fd4:	90 95       	com	r25
    1fd6:	80 95       	com	r24
    1fd8:	70 95       	com	r23
    1fda:	61 95       	neg	r22
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	08 95       	ret

00001fe4 <__floatunsisf>:
    1fe4:	e8 94       	clt
    1fe6:	09 c0       	rjmp	.+18     	; 0x1ffa <__floatsisf+0x12>

00001fe8 <__floatsisf>:
    1fe8:	97 fb       	bst	r25, 7
    1fea:	3e f4       	brtc	.+14     	; 0x1ffa <__floatsisf+0x12>
    1fec:	90 95       	com	r25
    1fee:	80 95       	com	r24
    1ff0:	70 95       	com	r23
    1ff2:	61 95       	neg	r22
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	99 23       	and	r25, r25
    1ffc:	a9 f0       	breq	.+42     	; 0x2028 <__floatsisf+0x40>
    1ffe:	f9 2f       	mov	r31, r25
    2000:	96 e9       	ldi	r25, 0x96	; 150
    2002:	bb 27       	eor	r27, r27
    2004:	93 95       	inc	r25
    2006:	f6 95       	lsr	r31
    2008:	87 95       	ror	r24
    200a:	77 95       	ror	r23
    200c:	67 95       	ror	r22
    200e:	b7 95       	ror	r27
    2010:	f1 11       	cpse	r31, r1
    2012:	f8 cf       	rjmp	.-16     	; 0x2004 <__floatsisf+0x1c>
    2014:	fa f4       	brpl	.+62     	; 0x2054 <__floatsisf+0x6c>
    2016:	bb 0f       	add	r27, r27
    2018:	11 f4       	brne	.+4      	; 0x201e <__floatsisf+0x36>
    201a:	60 ff       	sbrs	r22, 0
    201c:	1b c0       	rjmp	.+54     	; 0x2054 <__floatsisf+0x6c>
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	16 c0       	rjmp	.+44     	; 0x2054 <__floatsisf+0x6c>
    2028:	88 23       	and	r24, r24
    202a:	11 f0       	breq	.+4      	; 0x2030 <__floatsisf+0x48>
    202c:	96 e9       	ldi	r25, 0x96	; 150
    202e:	11 c0       	rjmp	.+34     	; 0x2052 <__floatsisf+0x6a>
    2030:	77 23       	and	r23, r23
    2032:	21 f0       	breq	.+8      	; 0x203c <__floatsisf+0x54>
    2034:	9e e8       	ldi	r25, 0x8E	; 142
    2036:	87 2f       	mov	r24, r23
    2038:	76 2f       	mov	r23, r22
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <__floatsisf+0x5e>
    203c:	66 23       	and	r22, r22
    203e:	71 f0       	breq	.+28     	; 0x205c <__floatsisf+0x74>
    2040:	96 e8       	ldi	r25, 0x86	; 134
    2042:	86 2f       	mov	r24, r22
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	2a f0       	brmi	.+10     	; 0x2054 <__floatsisf+0x6c>
    204a:	9a 95       	dec	r25
    204c:	66 0f       	add	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	88 1f       	adc	r24, r24
    2052:	da f7       	brpl	.-10     	; 0x204a <__floatsisf+0x62>
    2054:	88 0f       	add	r24, r24
    2056:	96 95       	lsr	r25
    2058:	87 95       	ror	r24
    205a:	97 f9       	bld	r25, 7
    205c:	08 95       	ret

0000205e <__fp_cmp>:
    205e:	99 0f       	add	r25, r25
    2060:	00 08       	sbc	r0, r0
    2062:	55 0f       	add	r21, r21
    2064:	aa 0b       	sbc	r26, r26
    2066:	e0 e8       	ldi	r30, 0x80	; 128
    2068:	fe ef       	ldi	r31, 0xFE	; 254
    206a:	16 16       	cp	r1, r22
    206c:	17 06       	cpc	r1, r23
    206e:	e8 07       	cpc	r30, r24
    2070:	f9 07       	cpc	r31, r25
    2072:	c0 f0       	brcs	.+48     	; 0x20a4 <__fp_cmp+0x46>
    2074:	12 16       	cp	r1, r18
    2076:	13 06       	cpc	r1, r19
    2078:	e4 07       	cpc	r30, r20
    207a:	f5 07       	cpc	r31, r21
    207c:	98 f0       	brcs	.+38     	; 0x20a4 <__fp_cmp+0x46>
    207e:	62 1b       	sub	r22, r18
    2080:	73 0b       	sbc	r23, r19
    2082:	84 0b       	sbc	r24, r20
    2084:	95 0b       	sbc	r25, r21
    2086:	39 f4       	brne	.+14     	; 0x2096 <__fp_cmp+0x38>
    2088:	0a 26       	eor	r0, r26
    208a:	61 f0       	breq	.+24     	; 0x20a4 <__fp_cmp+0x46>
    208c:	23 2b       	or	r18, r19
    208e:	24 2b       	or	r18, r20
    2090:	25 2b       	or	r18, r21
    2092:	21 f4       	brne	.+8      	; 0x209c <__fp_cmp+0x3e>
    2094:	08 95       	ret
    2096:	0a 26       	eor	r0, r26
    2098:	09 f4       	brne	.+2      	; 0x209c <__fp_cmp+0x3e>
    209a:	a1 40       	sbci	r26, 0x01	; 1
    209c:	a6 95       	lsr	r26
    209e:	8f ef       	ldi	r24, 0xFF	; 255
    20a0:	81 1d       	adc	r24, r1
    20a2:	81 1d       	adc	r24, r1
    20a4:	08 95       	ret

000020a6 <__fp_inf>:
    20a6:	97 f9       	bld	r25, 7
    20a8:	9f 67       	ori	r25, 0x7F	; 127
    20aa:	80 e8       	ldi	r24, 0x80	; 128
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	08 95       	ret

000020b2 <__fp_nan>:
    20b2:	9f ef       	ldi	r25, 0xFF	; 255
    20b4:	80 ec       	ldi	r24, 0xC0	; 192
    20b6:	08 95       	ret

000020b8 <__fp_pscA>:
    20b8:	00 24       	eor	r0, r0
    20ba:	0a 94       	dec	r0
    20bc:	16 16       	cp	r1, r22
    20be:	17 06       	cpc	r1, r23
    20c0:	18 06       	cpc	r1, r24
    20c2:	09 06       	cpc	r0, r25
    20c4:	08 95       	ret

000020c6 <__fp_pscB>:
    20c6:	00 24       	eor	r0, r0
    20c8:	0a 94       	dec	r0
    20ca:	12 16       	cp	r1, r18
    20cc:	13 06       	cpc	r1, r19
    20ce:	14 06       	cpc	r1, r20
    20d0:	05 06       	cpc	r0, r21
    20d2:	08 95       	ret

000020d4 <__fp_round>:
    20d4:	09 2e       	mov	r0, r25
    20d6:	03 94       	inc	r0
    20d8:	00 0c       	add	r0, r0
    20da:	11 f4       	brne	.+4      	; 0x20e0 <__fp_round+0xc>
    20dc:	88 23       	and	r24, r24
    20de:	52 f0       	brmi	.+20     	; 0x20f4 <__fp_round+0x20>
    20e0:	bb 0f       	add	r27, r27
    20e2:	40 f4       	brcc	.+16     	; 0x20f4 <__fp_round+0x20>
    20e4:	bf 2b       	or	r27, r31
    20e6:	11 f4       	brne	.+4      	; 0x20ec <__fp_round+0x18>
    20e8:	60 ff       	sbrs	r22, 0
    20ea:	04 c0       	rjmp	.+8      	; 0x20f4 <__fp_round+0x20>
    20ec:	6f 5f       	subi	r22, 0xFF	; 255
    20ee:	7f 4f       	sbci	r23, 0xFF	; 255
    20f0:	8f 4f       	sbci	r24, 0xFF	; 255
    20f2:	9f 4f       	sbci	r25, 0xFF	; 255
    20f4:	08 95       	ret

000020f6 <__fp_split3>:
    20f6:	57 fd       	sbrc	r21, 7
    20f8:	90 58       	subi	r25, 0x80	; 128
    20fa:	44 0f       	add	r20, r20
    20fc:	55 1f       	adc	r21, r21
    20fe:	59 f0       	breq	.+22     	; 0x2116 <__fp_splitA+0x10>
    2100:	5f 3f       	cpi	r21, 0xFF	; 255
    2102:	71 f0       	breq	.+28     	; 0x2120 <__fp_splitA+0x1a>
    2104:	47 95       	ror	r20

00002106 <__fp_splitA>:
    2106:	88 0f       	add	r24, r24
    2108:	97 fb       	bst	r25, 7
    210a:	99 1f       	adc	r25, r25
    210c:	61 f0       	breq	.+24     	; 0x2126 <__fp_splitA+0x20>
    210e:	9f 3f       	cpi	r25, 0xFF	; 255
    2110:	79 f0       	breq	.+30     	; 0x2130 <__fp_splitA+0x2a>
    2112:	87 95       	ror	r24
    2114:	08 95       	ret
    2116:	12 16       	cp	r1, r18
    2118:	13 06       	cpc	r1, r19
    211a:	14 06       	cpc	r1, r20
    211c:	55 1f       	adc	r21, r21
    211e:	f2 cf       	rjmp	.-28     	; 0x2104 <__fp_split3+0xe>
    2120:	46 95       	lsr	r20
    2122:	f1 df       	rcall	.-30     	; 0x2106 <__fp_splitA>
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <__fp_splitA+0x30>
    2126:	16 16       	cp	r1, r22
    2128:	17 06       	cpc	r1, r23
    212a:	18 06       	cpc	r1, r24
    212c:	99 1f       	adc	r25, r25
    212e:	f1 cf       	rjmp	.-30     	; 0x2112 <__fp_splitA+0xc>
    2130:	86 95       	lsr	r24
    2132:	71 05       	cpc	r23, r1
    2134:	61 05       	cpc	r22, r1
    2136:	08 94       	sec
    2138:	08 95       	ret

0000213a <__fp_zero>:
    213a:	e8 94       	clt

0000213c <__fp_szero>:
    213c:	bb 27       	eor	r27, r27
    213e:	66 27       	eor	r22, r22
    2140:	77 27       	eor	r23, r23
    2142:	cb 01       	movw	r24, r22
    2144:	97 f9       	bld	r25, 7
    2146:	08 95       	ret

00002148 <__mulsf3>:
    2148:	0e 94 b7 10 	call	0x216e	; 0x216e <__mulsf3x>
    214c:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_round>
    2150:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__fp_pscA>
    2154:	38 f0       	brcs	.+14     	; 0x2164 <__mulsf3+0x1c>
    2156:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__fp_pscB>
    215a:	20 f0       	brcs	.+8      	; 0x2164 <__mulsf3+0x1c>
    215c:	95 23       	and	r25, r21
    215e:	11 f0       	breq	.+4      	; 0x2164 <__mulsf3+0x1c>
    2160:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_inf>
    2164:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__fp_nan>
    2168:	11 24       	eor	r1, r1
    216a:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__fp_szero>

0000216e <__mulsf3x>:
    216e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fp_split3>
    2172:	70 f3       	brcs	.-36     	; 0x2150 <__mulsf3+0x8>

00002174 <__mulsf3_pse>:
    2174:	95 9f       	mul	r25, r21
    2176:	c1 f3       	breq	.-16     	; 0x2168 <__mulsf3+0x20>
    2178:	95 0f       	add	r25, r21
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	55 1f       	adc	r21, r21
    217e:	62 9f       	mul	r22, r18
    2180:	f0 01       	movw	r30, r0
    2182:	72 9f       	mul	r23, r18
    2184:	bb 27       	eor	r27, r27
    2186:	f0 0d       	add	r31, r0
    2188:	b1 1d       	adc	r27, r1
    218a:	63 9f       	mul	r22, r19
    218c:	aa 27       	eor	r26, r26
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	aa 1f       	adc	r26, r26
    2194:	64 9f       	mul	r22, r20
    2196:	66 27       	eor	r22, r22
    2198:	b0 0d       	add	r27, r0
    219a:	a1 1d       	adc	r26, r1
    219c:	66 1f       	adc	r22, r22
    219e:	82 9f       	mul	r24, r18
    21a0:	22 27       	eor	r18, r18
    21a2:	b0 0d       	add	r27, r0
    21a4:	a1 1d       	adc	r26, r1
    21a6:	62 1f       	adc	r22, r18
    21a8:	73 9f       	mul	r23, r19
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	83 9f       	mul	r24, r19
    21b2:	a0 0d       	add	r26, r0
    21b4:	61 1d       	adc	r22, r1
    21b6:	22 1f       	adc	r18, r18
    21b8:	74 9f       	mul	r23, r20
    21ba:	33 27       	eor	r19, r19
    21bc:	a0 0d       	add	r26, r0
    21be:	61 1d       	adc	r22, r1
    21c0:	23 1f       	adc	r18, r19
    21c2:	84 9f       	mul	r24, r20
    21c4:	60 0d       	add	r22, r0
    21c6:	21 1d       	adc	r18, r1
    21c8:	82 2f       	mov	r24, r18
    21ca:	76 2f       	mov	r23, r22
    21cc:	6a 2f       	mov	r22, r26
    21ce:	11 24       	eor	r1, r1
    21d0:	9f 57       	subi	r25, 0x7F	; 127
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	9a f0       	brmi	.+38     	; 0x21fc <__mulsf3_pse+0x88>
    21d6:	f1 f0       	breq	.+60     	; 0x2214 <__mulsf3_pse+0xa0>
    21d8:	88 23       	and	r24, r24
    21da:	4a f0       	brmi	.+18     	; 0x21ee <__mulsf3_pse+0x7a>
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	bb 1f       	adc	r27, r27
    21e2:	66 1f       	adc	r22, r22
    21e4:	77 1f       	adc	r23, r23
    21e6:	88 1f       	adc	r24, r24
    21e8:	91 50       	subi	r25, 0x01	; 1
    21ea:	50 40       	sbci	r21, 0x00	; 0
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__mulsf3_pse+0x64>
    21ee:	9e 3f       	cpi	r25, 0xFE	; 254
    21f0:	51 05       	cpc	r21, r1
    21f2:	80 f0       	brcs	.+32     	; 0x2214 <__mulsf3_pse+0xa0>
    21f4:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_inf>
    21f8:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__fp_szero>
    21fc:	5f 3f       	cpi	r21, 0xFF	; 255
    21fe:	e4 f3       	brlt	.-8      	; 0x21f8 <__mulsf3_pse+0x84>
    2200:	98 3e       	cpi	r25, 0xE8	; 232
    2202:	d4 f3       	brlt	.-12     	; 0x21f8 <__mulsf3_pse+0x84>
    2204:	86 95       	lsr	r24
    2206:	77 95       	ror	r23
    2208:	67 95       	ror	r22
    220a:	b7 95       	ror	r27
    220c:	f7 95       	ror	r31
    220e:	e7 95       	ror	r30
    2210:	9f 5f       	subi	r25, 0xFF	; 255
    2212:	c1 f7       	brne	.-16     	; 0x2204 <__mulsf3_pse+0x90>
    2214:	fe 2b       	or	r31, r30
    2216:	88 0f       	add	r24, r24
    2218:	91 1d       	adc	r25, r1
    221a:	96 95       	lsr	r25
    221c:	87 95       	ror	r24
    221e:	97 f9       	bld	r25, 7
    2220:	08 95       	ret

00002222 <__tablejump2__>:
    2222:	ee 0f       	add	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	05 90       	lpm	r0, Z+
    2228:	f4 91       	lpm	r31, Z
    222a:	e0 2d       	mov	r30, r0
    222c:	09 94       	ijmp

0000222e <_exit>:
    222e:	f8 94       	cli

00002230 <__stop_program>:
    2230:	ff cf       	rjmp	.-2      	; 0x2230 <__stop_program>
